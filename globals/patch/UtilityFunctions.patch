% Just a bunch of random functions needed to make stuff from 
% Master Quest, Dark Star and TTYD64 work.



% in which rain and quackles fix cloverâ€™s grand confusion
#new:Function $IsBadgeEquippedScriptVer %args: (BadgeID, Var# to store result to)
{
PUSH 	S0, S1, S2, S3, S4, RA
.Init
COPY S4, A0  %store source script pointer
LW S0, C (A0) %load args pointer into S0 
LW a1, 0000 (s0) %load arg 1 into a1 (badgeID)
JAL ~Func:get_variable %in case a variable was passed to us, get its value out
NOP
%result gets put into V0
LIO s2, 8010F498 %equipped badges address
ADDIU s3, s2, 78 %end of equipped badges
.Loop
LH        S1, 0 (S2)
BEQL    V0, S1, .End %if we find the badge...
ADDIU    A2, R0, 1 % return true
BNE        S2, S3, .Loop
ADDIU    S2, S2, 2
ADDIU    A2, R0, 0 % return false
.End
COPY A0, S4 %restore source script pointer (we never touch it but I don't know if GetVariable clobbers it)
LW a1, 0004 (s0) %load arg2, Var# to store to
%value to store (0 or 1) is already in A2
JAL ~Func:set_variable
NOP
POP       S0, S1, S2, S3, S4, RA
JR        RA
ADDIU	V0, R0, 2 %functions called from scripts need to return 2 or they will loop. Who thought this was a good design choice?
}


% A0 = badge ID, returns boolean on A0
% Doesn't follow calling convention, deal with it.
#new:Function $IsBadgeEquiped
{
	PUSH	S1, S2, S3
	.Init
	LIO		S2, 8010F498	% position in list
	ADDIU	S3, S2, 78		% end of list
	.Loop
	LH		S1, 0 (S2)
	BEQL	A0, S1, .End
	ADDIU	A0, R0, 1 % return true
	BNE		S2, S3, .Loop
	ADDIU	S2, S2, 2
	ADDIU	A0, R0, 0 % return false
	.End
	POP		S1, S2, S3
	JR		RA
	NOP
}


% Call $ReadAddress ( Address ByteSize *out offset FollowPointer )
#new:Function $ReadAddress
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    LW      S2, 8 (S0) % load Var from arg2
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=ByteSize
    Arg3=S2=*out
    Arg4=S3=Offset
    Arg5=S4=Pointer Flag
    %/
    % A pointer need to be followed?
    BNEL    S4, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S3
    % Read 1, 2 or 4 Bytes
    % Byte
    BEQL    S1, R0, .WriteVar
    LBU     A2, 0 (V0)
    % Half
    ORI     T2, R0, 1
    BEQL    S1, T2, .WriteVar
    LHU     A2, 0 (V0)
    % Word
    ORI     T2, R0, 2
    BEQ     R0, R0, .WriteVar
    LW      A2, 0 (V0)
    .WriteVar
    % Get Argument 3 and write output
    JAL 	~Func:set_variable
    COPY    A1, S2  % copy *out in to A1
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}



% Call $WriteAddress ( Address ByteSize NewValue Offset FollowPointer )
%
% EXAMPLE 1:
% Call $WriteAddress ( 8010F290 0 5 2 .False ) = 8010F290(+2) = 5 (Save as Byte)
%
% EXAMPLE 2 (reading pointers):
% Call $WriteAddress ( 802DF588 1 5 28 .True ) = Follow Pointer in 802DF588 > Pointer(+28) = 5 (Save as Half)
%
#new:Function $WriteAddress
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    JAL     ~Func:get_variable
    LW      A1, 8 (S0) % load Var from arg2
    COPY    S2, V0
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=ByteSize
    Arg3=S2=NewValue
    Arg4=S3=Offset
    Arg5=S4=Pointer Flag
    %/
    % A pointer need to be followed?
    BNEL    S4, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S3
    % Write 1, 2 or 4 Bytes
    % Byte
    BEQL    S1, R0, .End
    SB      S2, 0 (V0)
    % Half
    ORI     T2, R0, 1
    BEQL    S1, T2, .End
    SH      S2, 0 (V0)
    % Word
    ORI     T2, R0, 2
    BEQ     R0, R0, .End
    SW      S2, 0 (V0)
    .End
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}



% a0 = iconScript
%
% save iconIndex in s0
#new:Function $CreateIcon
{
    PUSH    RA, A0, A1, A2, A3, V0
    JAL     ~Func:create_hud_element
    NOP
    COPY    S0, V0 % save iconIndex in S0
    ADDIU	A1, R0, 0080
    JAL	    ~Func:set_hud_element_flags
    COPY    A0, S0 % load iconIndex
    ADDIU	A1, R0, 8000
    JAL	    ~Func:clear_hud_element_flags
    COPY    A0, S0 % load iconIndex
    POP     RA, A0, A1, A2, A3, V0
    JR      RA
    NOP
}

% Make icon to be always on top
#export:Function $CreateIcon_ignoreViewport
{
    PUSH    RA, A0, A1, A2, A3, V0
    JAL     ~Func:create_hud_element
    NOP
    COPY    S0, V0 % save iconIndex in S0
    ADDIU	A1, R0, 0040
    JAL	    ~Func:set_hud_element_flags
    COPY    A0, S0 % load iconIndex
    % hide icon
    ADDI    A1, R0, -100` % x
    CLEAR   A2 % y
    JAL     ~Func:set_hud_element_render_pos
    COPY    A0, S0
    ADDIU	A1, R0, 8000
    JAL	    ~Func:clear_hud_element_flags
    COPY    A0, S0 % load iconIndex
    POP     RA, A0, A1, A2, A3, V0
    JR      RA
    NOP
}


%Only calculates unconditional attack increases
#export:Function $Function_CalculateAttack %arg 1 = output var
{
	PUSH	 S1, S2, S3, RA
	COPY	 S1, A0		%Keep value of A0 for later
	ORI		 S2, R0, 0 %attack val
	LAW		 S3, 800DC148 %player actor pointer
	COPY	 A0, S3
	JAL		 802672AC %advanced ability checker, requires player/partner actor pointer in A0?
	ORI		 A1, R0, 1C %power plus
	ADD		 S2, S2, V0
	COPY	 A0, S3
	JAL		 802672AC 
	ORI		 A1, R0, 25 %p-down, d-up
	SUB		 S2, S2, V0
	COPY	 A0, S3
	JAL		 802672AC 
	ORI		 A1, R0, A %all or nothing
	ADD		 S2, S2, V0
	COPY	 A0, S3
	JAL		 802672AC 
	ORI		 A1, R0, 22 %p-up, d-down
	ADD		 S2, S2, V0
	%now that we have our defense, return it
	ADDI	A2, S2, 0
	ADD		A0, S1, R0 %get value of A0 back
	LW		V0, C (A0)
	JAL		~Func:set_variable
	LW		A1, 0 (V0)
	POP		 S1, S2, S3, RA
	JR		 RA
	ORI 	  V0, R0, 2
}



#export:Function $Function_CheckBadge %arg 1 = badge, arg 2 = output (1 if you have badge, 0 if not)
{
	PUSH	  RA, S1, S2, S3
	COPY	  S2, A0
	LW        V0, C (S2)
	COPY	  S1, V0
	JAL       ~Func:get_variable
	LW        A1, 0 (S1)
	JAL		  $IsBadgeEquipped
	COPY	  A0, V0
	LW        V0, C (S2)
	COPY	  A2, A0
	COPY	  A0, S2
	JAL       ~Func:set_variable
	LW        A1, 4 (S1) %get the next var
	POP 	  RA, S1, S2, S3
	JR		  RA
	ORI 	  V0, R0, 2
}



%Get battle data value
%	Returns value of (second arg) + battle data into (first arg)
#export:Function $Function_GetBattleDataByte %( out, offset ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
LIO		T0, 800DC070
ADD		T0, T0, V0
LBU		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

%Get arbitrary byte
%	Returns value of (second arg) into (first arg)
#export:Function $Function_GetArbitraryByte %( out, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
%LIO	T0, 800DC070
%ADD	T0, T0, V0
COPY	T0, V0
LBU		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_GetArbitraryShort %( out, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
%LIO	T0, 800DC070
%ADD	T0, T0, V0
COPY	T0, V0
LHU		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_GetArbitraryWord %( out, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
%LIO	T0, 800DC070
%ADD	T0, T0, V0
COPY	T0, V0
LW		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetArbitraryByte %( in, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = arg 1
%V0 = arg 2
COPY	T0, V0
SB		S0, 0 (T0)
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetArbitraryShort %( in, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = arg 1
%V0 = arg 2
COPY	T0, V0
SH		S0, 0 (T0)
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetArbitraryWord %( in, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = arg 1
%V0 = arg 2
COPY	T0, V0
SW		S0, 0 (T0)
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

%/



#export $CreateIcon
#export $CreateIcon_ignoreViewport
#export $IsBadgeEquiped
#export $IsBadgeEquippedScriptVer
#export $ReadAddress
#export $WriteAddress