% Just a bunch of random functions needed to make stuff from 
% Master Quest, Dark Star and TTYD64 work.



% in which rain and quackles fix cloverâ€™s grand confusion
#new:Function $IsBadgeEquippedScriptVer %args: (BadgeID, Var# to store result to)
{
PUSH 	S0, S1, S2, S3, S4, RA
.Init
COPY S4, A0  %store source script pointer
LW S0, C (A0) %load args pointer into S0 
LW a1, 0000 (s0) %load arg 1 into a1 (badgeID)
JAL ~Func:get_variable %in case a variable was passed to us, get its value out
NOP
%result gets put into V0
LIO s2, 8010F498 %equipped badges address
ADDIU s3, s2, 78 %end of equipped badges
.Loop
LH        S1, 0 (S2)
BEQL    V0, S1, .End %if we find the badge...
ADDIU    A2, R0, 1 % return true
BNE        S2, S3, .Loop
ADDIU    S2, S2, 2
ADDIU    A2, R0, 0 % return false
.End
COPY A0, S4 %restore source script pointer (we never touch it but I don't know if GetVariable clobbers it)
LW a1, 0004 (s0) %load arg2, Var# to store to
%value to store (0 or 1) is already in A2
JAL ~Func:set_variable
NOP
POP       S0, S1, S2, S3, S4, RA
JR        RA
ADDIU	V0, R0, 2 %functions called from scripts need to return 2 or they will loop. Who thought this was a good design choice?
}


% A0 = badge ID, returns boolean on A0
% Doesn't follow calling convention, deal with it.
#new:Function $IsBadgeEquiped
{
	PUSH	S1, S2, S3
	.Init
	LIO		S2, 8010F498	% position in list
	ADDIU	S3, S2, 78		% end of list
	.Loop
	LH		S1, 0 (S2)
	BEQL	A0, S1, .End
	ADDIU	A0, R0, 1 % return true
	BNE		S2, S3, .Loop
	ADDIU	S2, S2, 2
	ADDIU	A0, R0, 0 % return false
	.End
	POP		S1, S2, S3
	JR		RA
	NOP
}

%Some badges use "Equiped" instead of "Equipped" so just patch it twice.
#new:Function $IsBadgeEquipped
{
PUSH	S1, S2, S3
.Init
LIO		S2, 8010F498	% position in list
ADDIU	S3, S2, 78		% end of list
.Loop
LH		S1, 0 (S2)
BEQL	A0, S1, .End
ADDIU	V0, R0, 1 % return true
BNE		S2, S3, .Loop
ADDIU	S2, S2, 2
ADDIU	V0, R0, 0 % return false
.End
POP		S1, S2, S3
JR		RA
NOP
}


% Call $ReadAddress ( Address ByteSize *out offset FollowPointer )
#new:Function $ReadAddress
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    LW      S2, 8 (S0) % load Var from arg2
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=ByteSize
    Arg3=S2=*out
    Arg4=S3=Offset
    Arg5=S4=Pointer Flag
    %/
    % A pointer need to be followed?
    BNEL    S4, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S3
    % Read 1, 2 or 4 Bytes
    % Byte
    BEQL    S1, R0, .WriteVar
    LBU     A2, 0 (V0)
    % Half
    ORI     T2, R0, 1
    BEQL    S1, T2, .WriteVar
    LHU     A2, 0 (V0)
    % Word
    ORI     T2, R0, 2
    BEQ     R0, R0, .WriteVar
    LW      A2, 0 (V0)
    .WriteVar
    % Get Argument 3 and write output
    JAL 	~Func:set_variable
    COPY    A1, S2  % copy *out in to A1
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}



% Call $WriteAddress ( Address ByteSize NewValue Offset FollowPointer )
%
% EXAMPLE 1:
% Call $WriteAddress ( 8010F290 0 5 2 .False ) = 8010F290(+2) = 5 (Save as Byte)
%
% EXAMPLE 2 (reading pointers):
% Call $WriteAddress ( 802DF588 1 5 28 .True ) = Follow Pointer in 802DF588 > Pointer(+28) = 5 (Save as Half)
%
#new:Function $WriteAddress
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    JAL     ~Func:get_variable
    LW      A1, 8 (S0) % load Var from arg2
    COPY    S2, V0
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=ByteSize
    Arg3=S2=NewValue
    Arg4=S3=Offset
    Arg5=S4=Pointer Flag
    %/
    % A pointer need to be followed?
    BNEL    S4, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S3
    % Write 1, 2 or 4 Bytes
    % Byte
    BEQL    S1, R0, .End
    SB      S2, 0 (V0)
    % Half
    ORI     T2, R0, 1
    BEQL    S1, T2, .End
    SH      S2, 0 (V0)
    % Word
    ORI     T2, R0, 2
    BEQ     R0, R0, .End
    SW      S2, 0 (V0)
    .End
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}



% a0 = iconScript
%
% save iconIndex in s0
#new:Function $CreateIcon
{
    PUSH    RA, A0, A1, A2, A3, V0
    JAL     ~Func:create_hud_element
    NOP
    COPY    S0, V0 % save iconIndex in S0
    ADDIU	A1, R0, 0080
    JAL	    ~Func:set_hud_element_flags
    COPY    A0, S0 % load iconIndex
    ADDIU	A1, R0, 8000
    JAL	    ~Func:clear_hud_element_flags
    COPY    A0, S0 % load iconIndex
    POP     RA, A0, A1, A2, A3, V0
    JR      RA
    NOP
}

% Make icon to be always on top
#export:Function $CreateIcon_ignoreViewport
{
    PUSH    RA, A0, A1, A2, A3, V0
    JAL     ~Func:create_hud_element
    NOP
    COPY    S0, V0 % save iconIndex in S0
    ADDIU	A1, R0, 0040
    JAL	    ~Func:set_hud_element_flags
    COPY    A0, S0 % load iconIndex
    % hide icon
    ADDI    A1, R0, -100` % x
    CLEAR   A2 % y
    JAL     ~Func:set_hud_element_render_pos
    COPY    A0, S0
    ADDIU	A1, R0, 8000
    JAL	    ~Func:clear_hud_element_flags
    COPY    A0, S0 % load iconIndex
    POP     RA, A0, A1, A2, A3, V0
    JR      RA
    NOP
}


%Only calculates unconditional attack increases
#export:Function $Function_CalculateAttack %arg 1 = output var
{
	PUSH	 S1, S2, S3, RA
	COPY	 S1, A0		%Keep value of A0 for later
	ORI		 S2, R0, 0 %attack val
	LAW		 S3, 800DC148 %player actor pointer
	COPY	 A0, S3
	JAL		 802672AC %advanced ability checker, requires player/partner actor pointer in A0?
	ORI		 A1, R0, 1C %power plus
	ADD		 S2, S2, V0
	COPY	 A0, S3
	JAL		 802672AC 
	ORI		 A1, R0, 25 %p-down, d-up
	SUB		 S2, S2, V0
	COPY	 A0, S3
	JAL		 802672AC 
	ORI		 A1, R0, A %all or nothing
	ADD		 S2, S2, V0
	COPY	 A0, S3
	JAL		 802672AC 
	ORI		 A1, R0, 22 %p-up, d-down
	ADD		 S2, S2, V0
	%now that we have our defense, return it
	ADDI	A2, S2, 0
	ADD		A0, S1, R0 %get value of A0 back
	LW		V0, C (A0)
	JAL		~Func:set_variable
	LW		A1, 0 (V0)
	POP		 S1, S2, S3, RA
	JR		 RA
	ORI 	  V0, R0, 2
}



#export:Function $Function_CheckBadge %arg 1 = badge, arg 2 = output (1 if you have badge, 0 if not)
{
	PUSH	  RA, S1, S2, S3
	COPY	  S2, A0
	LW        V0, C (S2)
	COPY	  S1, V0
	JAL       ~Func:get_variable
	LW        A1, 0 (S1)
	JAL		  $IsBadgeEquipped
	COPY	  A0, V0
	LW        V0, C (S2)
	COPY	  A2, A0
	COPY	  A0, S2
	JAL       ~Func:set_variable
	LW        A1, 4 (S1) %get the next var
	POP 	  RA, S1, S2, S3
	JR		  RA
	ORI 	  V0, R0, 2
}



%Uses the ability check
#export:Function $Function_CheckAbility %arg 1 = badge, arg 2 = output (1 if you have badge, 0 if not)
{
	PUSH	  RA, S1, S2, S3
	COPY	  S2, A0
	LW        V0, C (S2)
	COPY	  S1, V0
	JAL       ~Func:get_variable
	LW        A1, 0 (S1)	
	JAL       ~Func:is_ability_active %gets if you have a badge equipped, it can detect copies of badges like deep focus
	COPY	  A0, V0
	%ADDIU     A0, R0, 30 %ability 0x30 = deep focus
	COPY	  A0, V0
	LW        V0, C (S2)
	COPY	  A2, A0
	COPY	  A0, S2
	JAL       ~Func:set_variable
	LW        A1, 4 (S1) %get the next var
	POP 	  RA, S1, S2, S3
	JR		  RA
	ORI 	  V0, R0, 2
}



%Get battle data value
%	Returns value of (second arg) + battle data into (first arg)
#export:Function $Function_GetBattleDataByte %( out, offset ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
LIO		T0, 800DC070
ADD		T0, T0, V0
LBU		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

%Get arbitrary byte
%	Returns value of (second arg) into (first arg)
#export:Function $Function_GetArbitraryByte %( out, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
%LIO	T0, 800DC070
%ADD	T0, T0, V0
COPY	T0, V0
LBU		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_GetArbitraryShort %( out, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
%LIO	T0, 800DC070
%ADD	T0, T0, V0
COPY	T0, V0
LHU		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_GetArbitraryWord %( out, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
LW		A1, 0 (S1) %get argument 1
COPY	S0, A1
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = first arg pointer
%V0 = second arg
%LIO	T0, 800DC070
%ADD	T0, T0, V0
COPY	T0, V0
LW		T1, 0 (T0)
%store
COPY	A2, T1
COPY	A0, S2
ADDIU	S1, S1, FFFC
JAL		~Func:set_variable
LW		A1, 0 (S1) %get argument 1
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetArbitraryByte %( in, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = arg 1
%V0 = arg 2
COPY	T0, V0
SB		S0, 0 (T0)
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetArbitraryShort %( in, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = arg 1
%V0 = arg 2
COPY	T0, V0
SH		S0, 0 (T0)
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}

#export:Function $Function_SetArbitraryWord %( in, address ) 
{
PUSH RA, A0, A1, S0, S1, S2
COPY	S2, A0
LW		S1, C (A0)
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 1
COPY	S0, V0
ADDIU	S1, S1, 4
COPY	A0, S2
JAL		~Func:get_variable
LW		A1, 0 (S1) %get argument 2
%S0 = arg 1
%V0 = arg 2
COPY	T0, V0
SW		S0, 0 (T0)
POP RA, A0, A1, S0, S1, S2
JR	RA
ADDIU	V0, R0, 2
}




% Call  $GetItemFlags ( itemID typeFlags targetFlags )
#export:Function $GetItemFlags
{
    PUSH    RA, A0, A1, A2, A3, S0, S1
    LW      S0, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 0 (S0) % load arg0
    LIO     V1, 800878E0 % item table
    SLL	    S1, V0, 5
    ADDU	S1, S1, V1
    % S1 = itemData
    LW      A0, 14 (SP)
    LW      A1, 4 (S0) % load arg1
    JAL     ~Func:set_variable
    LHU     A2, 18 (S1) % load typeFlags
    LW      A0, 14 (SP)
    LW      A1, 8 (S0) % load arg2
    JAL     ~Func:set_variable
    LW      A2, 8 (S1) % load targetFlags
    POP     RA, A0, A1, A2, A3, S0, S1
    JR      RA
    ORI     V0, R0, 2
}

% A0=itemID
%
% A1=typeOfFlags (0x00=typeFlags - 0x01=targetFlags)
%
% *out=V0=requestFlags
#export:Function $get_item_flags
{
    PUSH    A0, A1, A2, A3, V1
    COPY    V0, A0
    LIO     V1, 800878E0 % item table
    SLL	    A2, V0, 5
    ADDU	A2, A2, V1
    % A1 = typeOfFlagsRequested
    % A2 = itemData
    BEQL    A1, R0, .End
    LHU     V0, 18 (A2) % load typeFlags
    LW      V0, 8 (A2) % load targetFlags
    .End
    POP     A0, A1, A2, A3, V1
    JR      RA
    NOP
}

% A0=itemID
%
% V0=itemData*
%
% Get data from the globals editor data
%
% ==Data Struct==
%
% 0x00 = `string name`
%
% 0x04 = `u16 itemID`
%
% 0x08 = `u32 targetFlags`
%
% 0x0D = `u8 sell value`
%
% 0x10 = `string fullDesc`
%
% 0x14 = `string shortDesc`
%
% 0x18 = `u16 typeFlags`
%
% 0x1A = `u8 moveID`
%
% 0x1B = `u8 power/hpGain`
%
% 0x1C = `u8 fpGain`
#export:Function $get_item_global_data
{
    PUSH    A0, A1, A2, A3, V1
    COPY    V0, A0
    LIO     V1, 800878E0 % item table
    SLL	    A2, V0, 5
    ADDU	V0, A2, V1
    POP     A0, A1, A2, A3, V1
    JR      RA
    NOP
}

% `Call    $GetItemGlobalData ( itemID *out )`
%
% Get data from the globals editor data
%
% ==Data Struct==
%
% 0x00 = `string name`
%
% 0x04 = `u16 itemID`
%
% 0x08 = `u32 targetFlags`
%
% 0x0D = `u8 sell value`
%
% 0x10 = `string fullDesc`
%
% 0x14 = `string shortDesc`
%
% 0x18 = `u16 typeFlags`
%
% 0x1A = `u8 moveID`
%
% 0x1B = `u8 power/hpGain`
%
% 0x1C = `u8 fpGain`
#export:Function $GetItemGlobalData
{
    PUSH    RA, A0, A1, A2, A3, V0, V1, S0, S1
    COPY    S0, A0
    LW      A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 0 (A1) % arg0
    JAL     $get_item_global_data
    COPY    A0, V0
    % save var
    COPY    A2, V0
    COPY    A0, S0
    LW      A1, C (A0)
    JAL     ~Func:set_variable
    LW      A1, 4 (A1) % arg1
    .End
    POP     RA, A0, A1, A2, A3, V0, V1, S0, S1
    JR      RA
    ORI     V0, R0, 2
}




% Convert Float to Int
%
% Call $Function_ConvertToInt ( float *out )
#export:Function $Function_ConvertToInt
{
    PUSH    RA, A0, A1, A2, A3, V0, V1, S0
    COPY    S0, A0
    LW      A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 0 (A1)
    MTC1    V0, F0
    CVT.W.S F0, F0
    MFC1	A2, F0
    NOP
    COPY    A0, S0
    LW      A1, C (A0)
    JAL     ~Func:set_variable
    LW      A1, 4 (A1)
    POP     RA, A0, A1, A2, A3, V0, V1, S0
    JR      RA
    ORI     V0, R0, 2
}


% Call $ReadAddressFloat ( Address ByteSize *out offset FollowPointer )
%
% Uses set_float_variable for *out
#new:Function $ReadAddressFloat
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    LW      S2, 8 (S0) % load Var from arg2
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=ByteSize
    Arg3=S2=*out
    Arg4=S3=Offset
    Arg5=S4=Pointer Flag
    %/
    % A pointer need to be followed?
    BNEL    S4, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S3
    % Read 1, 2 or 4 Bytes
    % Byte
    BEQL    S1, R0, .WriteVar
    LBU     A2, 0 (V0)
    % Half
    ORI     T2, R0, 1
    BEQL    S1, T2, .WriteVar
    LHU     A2, 0 (V0)
    % Word
    ORI     T2, R0, 2
    BEQ     R0, R0, .WriteVar
    LW      A2, 0 (V0)
    .WriteVar
    % Get Argument 3 and write output
    JAL 	~Func:set_float_variable
    COPY    A1, S2  % copy *out in to A1
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}




% Fade screen brightness to black
%
% *Var0 (Float) = Fade Speed (Normally 25.0)
%
% *Var1 (Float) = New Brightness (0.00 - 255.0)(255.0 = Fully Black)
%
% Fade Color = 8015C790 (isn't implement in this Script)
%
% [ ! ] Writes in Var2
#new:Script:Global $Script_FadeScreenOut
{
	Loop
		Call 	$WriteAddress ( 80156903 0 0 .False .False ) % remove brightness lock
		Call 	$ReadAddressFloat  ( 80156904 2 *Var2 .False .False ) % load brightness
		AddF	*Var2 *Var0 % fade speed
		If *Var2 >= *Var1
			SetF 	*Var2 *Var1
            Call 	$WriteAddress ( 80156903 0 1 .False .False ) % Use default fade shape
			Call 	$WriteAddressFloat  ( 80156904 2 *Var2 .False .False ) % save brightness
			BreakLoop
		EndIf
		Call 	$WriteAddressFloat  ( 80156904 2 *Var2 .False .False ) % save brightness
		Wait 	1
	EndLoop
	Return
	End
}



% Call $WriteAddressFloat ( Address ByteSize NewValue Offset FollowPointer )
%
% Treats the new value to set as a float
#new:Function $WriteAddressFloat
{
    PUSH    RA, S0, S1, S2, S3, S4, S5
    COPY    S5, A0
    LW      S0, C (A0)
    % Get Argument 5
    COPY    A0, S5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    COPY    A0, S5
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    COPY    A0, S5
    JAL     ~Func:get_float_variable
    LW      A1, 8 (S0) % load Var from arg2
    MFC1    V0, F0
    COPY    S2, V0
    % Get Argument 2
    COPY    A0, S5
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    COPY    A0, S5
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=ByteSize
    Arg3=S2=NewValue
    Arg4=S3=Offset
    Arg5=S4=Pointer Flag
    %/
    % A pointer need to be followed?
    BNEL    S4, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S3
    % Write 1, 2 or 4 Bytes
    % Byte
    BEQL    S1, R0, .End
    SB      S2, 0 (V0)
    % Half
    ORI     T2, R0, 1
    BEQL    S1, T2, .End
    SH      S2, 0 (V0)
    % Word
    ORI     T2, R0, 2
    BEQ     R0, R0, .End
    SW      S2, 0 (V0)
    .End
    POP     RA, S0, S1, S2, S3, S4, S5
    JR      RA
    ORI     V0, R0, 2
}



% Call $WriteBitFlag ( Address FollowPointer offset bitIndex(0-7) NewValue )
%
% Write a single bit from an address
#new:Function $WriteBitFlag
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    JAL     ~Func:get_variable
    LW      A1, 10 (S0)
    COPY    S4, V0
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    JAL     ~Func:get_variable
    LW      A1, 8 (S0)
    COPY    S2, V0
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=FollowPointer
    Arg3=S2=Offset
    Arg4=S3=bitIndex
    Arg5=S4=NewValue
    %/
    % A pointer need to be followed?
    BNEL    S1, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S2
    % Read bit
    LBU     A2, 0 (V0) % load address
    COPY    T0, A2
    /%
    Bits as hex
    bit0=1
    bit1=2
    bit2=4
    bit3=8
    bit4=10
    bit5=20
    bit6=40
    bit7=80
    %/
    %===============
    .bit0
    %===============
    BNE     S3, R0, .bit1
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 31` % bit0
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit0_as_False
    NOP
    .Set_bit0_as_True
    % Check if bit0 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit0 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 1
    .Set_bit0_as_False
    % Check if bit0 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit0 as False
    ORI     T1, R0, 1
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit1
    %===============
    ORI     T1, R0, 1
    BNE     S3, T1, .bit2
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 30` % bit1
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit1_as_False
    NOP
    .Set_bit1_as_True
    % Check if bit1 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit1 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 2
    .Set_bit1_as_False
    % Check if bit1 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit1 as False
    ORI     T1, R0, 2
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit2
    %===============
    ORI     T1, R0, 2
    BNE     S3, T1, .bit3
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 29` % bit2
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit2_as_False
    NOP
    .Set_bit2_as_True
    % Check if bit2 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit2 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 4
    .Set_bit2_as_False
    % Check if bit2 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit2 as False
    ORI     T1, R0, 4
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit3
    %===============
    ORI     T1, R0, 3
    BNE     S3, T1, .bit4
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 28` % bit3
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit3_as_False
    NOP
    .Set_bit3_as_True
    % Check if bit3 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit3 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 8
    .Set_bit3_as_False
    % Check if bit3 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit3 as False
    ORI     T1, R0, 8
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit4
    %===============
    ORI     T1, R0, 4
    BNE     S3, T1, .bit5
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 27` % bit4
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit4_as_False
    NOP
    .Set_bit4_as_True
    % Check if bit4 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit4 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 10
    .Set_bit4_as_False
    % Check if bit4 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit4 as False
    ORI     T1, R0, 10
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit5
    %===============
    ORI     T1, R0, 5
    BNE     S3, T1, .bit6
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 26` % bit5
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit5_as_False
    NOP
    .Set_bit5_as_True
    % Check if bit5 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit5 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 20
    .Set_bit5_as_False
    % Check if bit5 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit5 as False
    ORI     T1, R0, 20
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit6
    %===============
    ORI     T1, R0, 6
    BNE     S3, T1, .bit7
    NOP
    % get current bit boolean value
    SLL    	T0, T0, 25` % bit6
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit6_as_False
    NOP
    .Set_bit6_as_True
    % Check if bit6 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit6 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 40
    .Set_bit6_as_False
    % Check if bit6 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit6 as False
    ORI     T1, R0, 40
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    %===============
    .bit7
    %===============
    % get current bit boolean value
    SLL    	T0, T0, 24` % bit7
    SRL 	T0, T0, 31` % Get Bool
    % New value will be False?
    BEQ     S4, R0, .Set_bit7_as_False
    NOP
    .Set_bit7_as_True
    % Check if bit7 is already true
    BNE     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit7 as True
    BEQ     R0, R0, .SaveBit
    ADDIU   A2, A2, 80
    .Set_bit7_as_False
    % Check if bit7 is already False
    BEQ     T0, R0, .End % it is, bypass everything
    NOP
    % Set bit7 as False
    ORI     T1, R0, 80
    BEQ     R0, R0, .SaveBit
    SUBU    A2, A2, T1
    .SaveBit
    SB      A2, 0 (V0)
    .End
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}



% Fade screen brightness from black
%
% *Var0 (Float) = Fade Speed (Normally 25.0)
%
% *Var1 (Float) = New Brightness (0.00 - 255.0)(255.0 = Fully Black)
%
% Fade Color = 8015C790 (isn't implement in this Script)
%
% [ ! ] Writes in Var2
#new:Script:Global $Script_FadeScreenIn
{
	Loop
		Call 	$WriteAddress ( 80156903 0 0 .False .False ) % remove brightness lock
		Call 	$ReadAddressFloat  ( 80156904 2 *Var2 .False .False ) % load brightness
		SubF	*Var2 *Var0 % fade speed
		If *Var2 <= *Var1
			SetF 	*Var2 *Var1
            Call 	$WriteAddress ( 80156903 0 1 .False .False ) % Use default fade shape
			Call 	$WriteAddressFloat  ( 80156904 2 *Var2 .False .False ) % save brightness
			BreakLoop
		EndIf
		Call 	$WriteAddressFloat  ( 80156904 2 *Var2 .False .False ) % save brightness
		Wait 	1
	EndLoop
	Return
	End
}



% Call $ReadBitFlag ( Address FollowPointer offset bitIndex(0-7) *out )
%
% Read a single bit from an address
#new:Function $ReadBitFlag
{
    PUSH    RA, S0, S1, S2, S3, S4
    LW      S0, C (A0)
    % Get Argument 5
    LW      S4, 10 (S0) % load *out from arg5
    % Get Argument 4
    JAL     ~Func:get_variable
    LW      A1, C (S0)
    COPY    S3, V0
    % Get Argument 3
    JAL     ~Func:get_variable
    LW      A1, 8 (S0)
    COPY    S2, V0
    % Get Argument 2
    JAL     ~Func:get_variable
    LW      A1, 4 (S0)
    COPY    S1, V0
    % Get Argument 1
    JAL     ~Func:get_variable
    LW      A1, 0 (S0)
    /%
    Arg1=V0=Address
    Arg2=S1=FollowPointer
    Arg3=S2=Offset
    Arg4=S3=bitIndex
    Arg5=S4=*out
    %/
    % A pointer need to be followed?
    BNEL    S1, R0, .ReadPointer
    LW      V0, 0 (V0)
    .ReadPointer
    % Read Offset
    ADDU    V0, V0, S2
    % Read bit
    LBU     A2, 0 (V0) % load address
    BEQL    S3, R0, .GetBit
    SLL    	A2, A2, 31` % bit0
    ORI     T0, R0, 1
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 30` % bit1
    ORI     T0, R0, 2
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 29` % bit2
    ORI     T0, R0, 3
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 28` % bit3
    ORI     T0, R0, 4
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 27` % bit4
    ORI     T0, R0, 5
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 26` % bit5
    ORI     T0, R0, 6
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 25` % bit6
    ORI     T0, R0, 7
    BEQL    S3, T0, .GetBit
    SLL    	A2, A2, 24` % bit7
    .GetBit
    SRL 	A2, A2, 31` % Get Bool
    % Get Argument 5 and write output
    JAL 	~Func:set_variable
    COPY    A1, S4  % copy *out in to A1
    POP     RA, S0, S1, S2, S3, S4
    JR      RA
    ORI     V0, R0, 2
}












#export:Function $Function_SetLevel %pass in enemy pointer
{
	PUSH	RA, S0, S1, S2
	DADDU	S1, A0, R0
	LW		S0, C (S1)
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	ADDIU	S0, S0, 4
	DADDU	A0, S1, R0
	LW		A1, 0 (S0)
	JAL		~Func:get_variable
	DADDU	S2, V0, R0
	SB		V0, 6 (S2)
	POP		RA, S0, S1, S2
	JR		RA
	ADDIU V0, R0, 2
}

#export:Function $Function_SetEscape %sets the "can you run away?" flag (zero = no, non-zero = yes)
{
PUSH	RA
JAL		~Func:get_variable
LW		A1, 0 (S0) %get argument
SLTI	V0, V0, 1 %force it to be a boolean value, (but this inverts it too!)
LUI		A1, 800E %1st half of battle data address (actually 800D)
LB		A2, C077 (A1) %get the flags
BEQ		V0, R0, .false 
ORI		A2, A2, 20  %20 flag
ANDI	A2, A2, FFDF %everything but the 20 flag (signed value?)
.false
SB		A2, C077 (A1) %set the flags
POP		RA
JR RA
ORI V0, R0, 2
}





#export $CreateIcon
#export $CreateIcon_ignoreViewport
#export $IsBadgeEquiped
#export $IsBadgeEquipped
#export $IsBadgeEquippedScriptVer
#export $ReadAddress
#export $WriteAddress
#export $ReadAddressFloat
#export $Script_FadeScreenIn
#export $Script_FadeScreenOut
#export $WriteAddressFloat
#export $WriteBitFlag
#export $ReadBitFlag
#export $Function_SetLevel
#export $Function_SetEscape