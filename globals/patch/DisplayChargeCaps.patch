#new:Data $MaxCharge
{
00000001 11111111 00000000 
00000113 45222543 11000000 
00011452 22222222 54110000 
00134222 22222222 22531000 
013422EF E22EFE22 EFE43100 
01522EFF F2EFFF2E FFF24100 
13222EFF F2EFFF2E FFF22310 
14222FFF E2FFFE2F FFE22410 
14222FFF 22FFF22F FF222410 
14222FF2 22FF222F F2222410 
14222222 22222222 22222410 
1322FF22 2FF222FF 22222310 
0142FF22 2FF222FF 22224100 
01322222 22222222 22223100 
00134222 22222222 22431000 
00011342 22222222 43110000 
00000111 35222531 11000000 
00000000 14222410 00000000 
00000000 01424100 00000000 
00000000 01323100 00000000 
00000000 00121000 00000000 
00000000 00010000 00000000 
00000000 00000000 00000000 
00000000 00000000 00000000 
}

#new:Data $OriginalJumpCharge
{
00000001 11111111 00000000 00000113 45222543 11000000 00011452 22222222 
54110000 00134222 22222222 22531000 013422DC D2222288 88243100 015225CC 
C2222769 97824100 13222DCC C2222766 66822310 14222CCC D2997977 78922410 
14222CCC 297699AA AAA22410 14222CC2 29699999 AAA22410 14222222 299999AA 
AAA22410 1322CC22 26666666 68822310 0142CC22 28666666 88824100 01322222 
22888888 88223100 00134222 22222222 22431000 00011342 22222222 43110000 
00000111 35222531 11000000 00000000 14222410 00000000 00000000 01424100 
00000000 00000000 01323100 00000000 00000000 00121000 00000000 00000000 
00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
}

#new:Data $OriginalHammerCharge
{
00000001 11111111 00000000 00000113 45222543 11000000 00011452 22222222 
54110000 00135222 22222222 22531000 013522DC D22288A2 AA253100 015225CC 
C22878A8 AA225100 13222DCC C28778A7 88922310 14222CCC D28778A7 77892410 
14222CCC 22878A87 77892410 14222CC2 2288AA77 78892410 14222222 222AA877 
88992410 1322CC22 22224A88 89952310 0142CC22 2224AAA9 99524100 01322222 
222AAA22 22223100 00134222 222AA222 22431000 00011342 22222222 43110000 
00000111 35222531 11000000 00000000 14222410 00000000 00000000 01425100 
00000000 00000000 01323100 00000000 00000000 00121000 00000000 00000000 
00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
}

/%#new:Data $OriginalGoomCharge
{
00000001 11111111 00000000 00000113 45222543 11000000 00011452 22222222 
54110000 00135222 22222222 22531000 013522DC D2222DBC CD253100 015225CC 
C2CECBBB CED25100 13222DCC C2CBEE9E EBD22310 14222CCC D229AA8A A9222410 
14222CCC 2229AE8E A9222410 14222CC2 2297AA8A A7922410 14222222 229A8888 
8A922410 1322CC22 22279999 97222310 0142CC22 22998666 89924100 01322222 
22999222 99903100 00134222 22222222 22431000 00011342 22222222 43110000 
00000111 35222531 11000000 00000000 14222410 00000000 00000000 01425100 
00000000 00000000 01323100 00000000 00000000 00121000 00000000 00000000 
00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 
}%/



#new:Data $ChargeState
{
	00000000 %tracks whether we last had max charge on
}

	
	%A0 0, V0 0: max, unset. set
	%A0 0, V0 1: max, set.   clear
	%A0 1, V0 0: not max, unset. do nothing
	%A0 1, V0 1: not max, set. clear

@Hook EF54 %TODO - battle step
{
	PUSH RA, A0, A1, A2, S0, V0
	%figure out if frame counter &= 0111 1111 (127) = 64
	%frame counter = player data (8010F290) + 2BC = 8010F54C
	%that's ANDI 7F, ADDIU 40, BEQ
	%if not, bail
	LAW 	A0, 8010F54C
	ANDI	A0, A0, 003F
	ADDIU	A1, R0, 20
	BNE		A0, A1, .done
		NOP
	LA		S0, 800DC070
	
	%next, figure out if any of the charges are active:
	%mario's jump charge is in battle+97 (800DC)
	%hammer charge is in battle+96
	%goom's charge is in his actor struct (check partner ID!!) then actor+220 (normally used for glowing enemies)
	%for each charge, if >0 but <5, check ChargeState. If 1, set to 0 (jump to switch back code) and be done with it.
	%if >= 5, toggle ChargeState and jump to appropriate code. 
	%also patch palette if need be, for Goom.

	.jumpTest
	%first, if the 'max' thing is set, unset it, no matter what.
	LAB		V0, $ChargeState[1]
	LA		A1, $OriginalJumpCharge
	BNE		V0, R0, .editJumpCharge %reset
		RESERVED %for LA
	LBU		A0, 97 (S0)	%get jump charge
	BEQ		A0, R0, .hammerTest
		SLTIU	A0, A0, 5 %1 if not max, 0 if max
	%if we got this far, 'max' is not set. we can set it now if we're at max. Otherwise, we bail.
	BNE		A0, R0, .hammerTest
		NOP
	%setting max - fall through to jump charge
	LA		A1, $MaxCharge
	
	.editJumpCharge
	XORI	V0, V0, 1 %swap bit
	SAB		V0, $ChargeState[1] %store charge state ()
	%memcpy args: 
	%A0 = DEST (pointer)
	%A1 = SOURCE (pointer)
	%A2 = SIZE (int)
	LA		A0, 80101780 %jump dest
	%A1 was set to one of two possibilities, above
	JAL 	~Func:memcpy
	LI		A2, 120  
	
	.hammerTest
	%...which is the same as the jump test except with the numbers changed
	LAB		V0, $ChargeState[2]
	LA		A1, $OriginalHammerCharge
	BNE		V0, R0, .editHammerCharge %reset
		RESERVED %for LA
	LBU		A0, 96 (S0)	%get hammer charge
	BEQ		A0, R0, .goomTest
		SLTIU	A0, A0, 5 %1 if not max, 0 if max
	%if we got this far, 'max' is not set. we can set it now if we're at max. Otherwise, we bail.
	BNE		A0, R0, .goomTest
		NOP
	%setting max - fall through to jump charge
	LA		A1, $MaxCharge
	
	.editHammerCharge
	XORI	V0, V0, 1 %swap bit
	SAB		V0, $ChargeState[2] %store charge state ()
	%memcpy args: 
	%A0 = DEST (pointer)
	%A1 = SOURCE (pointer)
	%A2 = SIZE (int)
	LA		A0, 801018C0 %hammer dest
	%A1 was set to one of two possibilities, above
	JAL 	~Func:memcpy
	LI		A2, 120  

	.goomTest
	%dummied out - Goombario doesn't show the speech bubble, 
	
/%	LAB		V0, $ChargeState[3]
	LA		A1, $OriginalGoomCharge
	BNE		V0, R0, .editGoomCharge %reset
		RESERVED %for LA
	%goombario needs a number of extra checks to check his charge 
	LW		A1, DC (S0) %we're OK overwriting A1 - if we change charge we'll set it again later
	BEQ		A1, R0, .done %bail if no partner
		LBU		A0, 136 (A1) %get actor type
	ANDI	A0, A0, 00FF %cast to byte (just in case)
	ADDIU	A2, R0, 6F %goombario!
	BNE		A0, A2, .done %bail if not Goombario
		LBU		A0, 220 (A1) %get glow byte - used to store charge amount
	BEQ		A0, R0, .done
		SLTIU	A0, A0, 5 %1 if not max, 0 if max
	BNE		A0, R0, .done
		NOP	
	LA		A1, $MaxCharge
	
	.editGoomCharge
	XORI	V0, V0, 1 %swap bit
	SAB		V0, $ChargeState[3] %store charge state ()
	%...buuuut now we need to figure out the current halfword to put into the palette
	ORI		S0, R0, 2805
	BNEL	V0, R0, .useActivePalette
		ORI		S0, R0, E39D
	.useActivePalette
	SAH		S0, 80101B3C %80101B20 + 1C %update palette
	LA		A0, 80101A00 %goom dest
	%A1 was set to one of two possibilities, above
	JAL 	~Func:memcpy
	LI		A2, 120  %/
	
	.done
	POP RA, A0, A1, A2, S0, V0
	ADDIU     SP, SP, FFE8	%in original
	%put hook stuff back here
	J 80033B5C %80033B54 + 8
	SW        RA, 10 (SP)	%in original
}


/%
% 0009AC30 --> 80101780
#new:Unknown $???_80101780
00000001 11111111 00000000 00000113 45222543 11000000 00011452 22222222 
54110000 00134222 22222222 22531000 013422DC D2222288 88243100 015225CC 
C2222769 97824100 13222DCC C2222766 66822310 14222CCC D2997977 78922410 
14222CCC 297699AA AAA22410 14222CC2 29699999 AAA22410 14222222 299999AA 
AAA22410 1322CC22 26666666 68822310 0142CC22 28666666 88824100 01322222 
22888888 88223100 00134222 22222222 22431000 00011342 22222222 43110000 
00000111 35222531 11000000 00000000 14222410 00000000 00000000 01424100 
00000000 00000000 01323100 00000000 00000000 00121000 00000000 00000000 
00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 

% 0009AD50 --> 801018A0
#new:Unknown $???_801018A0
00000001 FFFF5AD7 AD6BC631 C4C79341 92C56181 48813107 18B773F9 00010001 

% 0009AD70 --> 801018C0
#new:Unknown $???_801018C0
00000001 11111111 00000000 00000113 45222543 11000000 00011452 22222222 
54110000 00135222 22222222 22531000 013522DC D22288A2 AA253100 015225CC 
C22878A8 AA225100 13222DCC C28778A7 88922310 14222CCC D28778A7 77892410 
14222CCC 22878A87 77892410 14222CC2 2288AA77 78892410 14222222 222AA877 
88992410 1322CC22 22224A88 89952310 0142CC22 2224AAA9 99524100 01322222 
222AAA22 22223100 00134222 222AA222 22431000 00011342 22222222 43110000 
00000111 35222531 11000000 00000000 14222410 00000000 00000000 01425100 
00000000 00000000 01323100 00000000 00000000 00121000 00000000 00000000 
00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 

% 0009AE90 --> 801019E0
#new:Unknown $???_801019E0
00000001 FFFF5AD7 AD6BC631 AC059B43 828179C1 51013905 18B773F9 00010001 

% 0009AEB0 --> 80101A00
#new:Unknown $???_80101A00
00000001 11111111 00000000 00000113 45222543 11000000 00011452 22222222 
54110000 00135222 22222222 22531000 013522DC D2222DBC CD253100 015225CC 
C2CECBBB CED25100 13222DCC C2CBEE9E EBD22310 14222CCC D229AA8A A9222410 
14222CCC 2229AE8E A9222410 14222CC2 2297AA8A A7922410 14222222 229A8888 
8A922410 1322CC22 22279999 97222310 0142CC22 22998666 89924100 01322222 
22999222 99903100 00134222 22222222 22431000 00011342 22222222 43110000 
00000111 35222531 11000000 00000000 14222410 00000000 00000000 01425100 
00000000 00000000 01323100 00000000 00000000 00121000 00000000 00000000 
00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 

% 0009AFD0 --> 80101B20
#new:Unknown $???_80101B20
00000001 FFFF5AD7 AD6BC631 CC0FAAC9 92036943 B5AF111B 18B773F9 28050001 
%/