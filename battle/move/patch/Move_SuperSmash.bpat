%Multismash from Master Quest added into
%Down Bad Edition.
%Damage lowered by 2 per hit to not make it broken.


%this is multi-smash



#new:Function $Function_FixedDamageAdjuster   %args: (damage in, return (Var#))
{
PUSH 	S0, S1, S2, RA
%setup
COPY S1, A0 %store calling pointer into S1 for now
LW S0, C (A0) %arg list pointer in S0  
LW A1, 0000 (S0) %put input damage source handle into A1 for GetVariable 
JAL ~Func:get_variable %A0 is still return pointer
NOP 
COPY S2, V0 %put input damage from var into S2  
%start checking
%we need to check last stand first, because we're working backwards and it's applied at the last step of the process. Then close call, then the rest of the badges.
LAB A0, 8010F292 %get Mario's HP
SLTI A0, A0, 6 %if not it's 5 or less...
BEQ A0, R0, .alwayson %bail out
NOP
JAL  $IsBadgeEquiped
ADDIU A0, R0, 111 %last stand badge ID
BEQ  A0, R0, .holdfast
ADDIU A0, R0, 2 %prep multiply   
MULTU A0, S2
MFLO S2 %get multiply result
.holdfast
JAL  $IsBadgeEquiped
ADDIU A0, R0, 112 %hold fast badge ID
ADDU S2, S2, A0 %if equipped, add 1
.alwayson %badges without a condition past this point
JAL  $IsBadgeEquiped %this function clobbers A0 so we had to store it into S1 earlier
ADDIU A0, R0, 0FB %defend plus #1 
ADDU S2, S2, A0 %if equipped, add 1
JAL  $IsBadgeEquiped %remember, the next item is the delay slot. That's run just before we jump
ADDIU A0, R0, 13E %defend plus #2
ADDU S2, S2, A0 %if equipped, add 1
JAL  $IsBadgeEquiped 
ADDIU A0, R0, 116 %P-Down, D-Up
ADDU S2, S2, A0 %if equipped, add 1
JAL  $IsBadgeEquiped 
ADDIU A0, R0, 116 %P-Up, D-Down
SUBU S2, S2, A0 %this time, subtract 1 'cause our defense just went down
.store
COPY A0, S1 %recover calling pointer
LW A1, 0004 (S0) %load arg2, Var# to store to
COPY A2, S2 %value to store
JAL ~Func:set_variable
NOP
ADDIU	V0, R0, 2 %functions called from scripts need to return 2 or they will loop. Who thought this was a good design choice?
POP 	S0, S1, S2, RA
JR		RA
NOP
}

%NOP 			%DEBUG: allow last instruction time to clear
%SW A1, 1 (R0) 	%DEBUG: force crash so we can see println debug



@ $Script_UseMove0
{
    0:  Call     EnablePlayerBlur     ( 00000001 )
   10:  Call     802694A4 ( 00000001 )
   20:  Call     GetMenuSelection     ( *Var[0] *Var[1] *Var[2] )
   38:  Switch  *Var[1]
   44:      Case  ==  00000000 
   50:          Set  *Var[D]  0000002D 
   60:          Set  *Var[E]  00000001 
   70:          Set  *Var[F]  00000003 
   80:          ExecWait $Script_802A3260 
   8C:      Case  ==  00000001 
   98:          Set  *Var[D]  0000002D 
   A8:          Set  *Var[E]  00000001 
   B8:          Set  *Var[F]  00000003 
   C8:          ExecWait $Script_802A3260 
   D4:      Case  ==  00000002 
   E0:          Set  *Var[D]  0000002D 
   F0:          Set  *Var[E]  00000001 
  100:          Set  *Var[F]  00000003 
  110:          ExecWait $Script_802A3260 
  11C:  EndSwitch
  124:  Call     EnablePlayerBlur     ( 00000000 )
  134:  Return
  13C:  End
}
  
@ $Script_802A3260
{
		Set *Var[B] 00000000
        Loop 3
        Add *Var[B] 00000001
    0:  Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
   18:  Switch  *Var[1] 
   24:  	Case  ==  00000000 
   30:  		ExecWait $Script_802A1B40 
   3C:  	Case  ==  00000001 
   48:  		ExecWait $Script_802A2000 
   54:  	Case  ==  00000002 
   60:  		ExecWait $Script_802A23E8 
   6C:  EndSwitch
   74:  Call     PlayerTestEnemy 	( *Var[0] 00000050 00000019 00000000 00000000 00000010 )
   98:  Call     UseBattleCamPreset 	( 0000002C )
   A8:  Wait     00000001 
   B4:  ExecWait $Script_802A3188 
   C0:  Call     PlayerTestEnemy 	( *Var[0] 00000040 00000000 00000000 00000000 00000010 )
   E4:  If  *Var[0]  ==  00000006 
   F4:  	ExecWait $Script_802A1A64 
  100:  	Return
  108:  EndIf
        %Call    GetLastDamage ( .Actor:Self *Var[B])
  110:  Call     DidActionSucceed ( *Var[0] )
  120:  Switch  *Var[0] 
  12C:  	Case  >  00000000 
  138:  		Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
  150:  		Switch  *Var[1] 
  15C:  			Case  ==  00000000 
  168:  				Call     PlaySoundAtActor 	( .Actor:Player 000000E9 )
  17C:  			Case  ==  00000001 
  188:  				Call     PlaySoundAtActor 	( .Actor:Player 0000010E )
  19C:  			Case  ==  00000002 
  1A8:  				Call     PlaySoundAtActor 	( .Actor:Player 0000010E )
  1BC:  		EndSwitch
  				If *Var[B] < 00000003
  1C4:  			Call     PlayerDamageEnemy 	( *Var[0] 00000040 00000019 00000000 *Var[F] 00000050 ) %not final hit
  				Else
   1C4:  			Call     PlayerDamageEnemy 	( *Var[0] 00000040 00000019 00000000 *Var[F] 00000070 ) %final hit		
  				EndIf
  1E8:  	Default
  1F0:  		Call     GetMenuSelection 	( *Var[0] *Var[1] *Var[2] )
  208:  		Switch  *Var[1] 
  214:  			Case  ==  00000000 
  220:  				Call     PlaySoundAtActor 	( .Actor:Player 000000E9 )
  234:  			Case  ==  00000001 
  240:  				Call     PlaySoundAtActor 	( .Actor:Player 0000010E )
  254:  			Case  ==  00000002 
  260:  				Call     PlaySoundAtActor 	( .Actor:Player 0000010E )
  274:  		EndSwitch
  				If *Var[B] < 00000003
  27C:  			Call     PlayerDamageEnemy 	( *Var[0] 00000040 00000019 00000000 *Var[E] 00000010 ) %not final hit
  				Else
  					Call     PlayerDamageEnemy 	( *Var[0] 00000040 00000019 00000000 *Var[E] 00000030 ) %final hit
  				EndIf
  2A0:  EndSwitch
         Set   *Var[6]   *Var[0]
         Call GetOwnerTarget ( *Var[0] *Var[1] )
%        Call ActorExists    ( *Var[0] *Var[9] )
%        If *Var[9] == 00000000
%        	BreakLoop %Goto 00000005
%        EndIf
%        Call GetActorHP ( *Var[0] *Var[9] )
%        If *Var[9] < 1`
%        	BreakLoop %Goto 00000005 %use a BreakLoop you coward
%        EndIf 
        Wait  00000008
        EndLoop
        Label 00000003 
       %Multi-smash no longer has recoil.  
       /% Wait 0000000C %delay before recoil
        Call     SetTargetActor ( .Actor:Self .Actor:Player ) %self damage
        Call	 SetGoalToTarget( .Actor:Self )
        Call	 AddGoalPos( .Actor:Self -5` 0` 0` ) %move effect target over slightly
        Call  $Function_FixedDamageAdjuster ( 3` *Var[0] )
        %more fixed damage stuff - compensate for shrink, attack drop
        Call     GetStatusFlags 	( .Actor:Self *Var[1] )
        If  *Var[1] & 00080000 %if shrunk...
        	Mul *Var[0] 00000002
        EndIf
        Call  GetActorAttackBoost( .Actor:Self *Var[1] ) %attack drop is applied first in the calculation so we undo it last
        Sub   *Var[0] *Var[1]
        Call	EnemyDamageTarget	( .Actor:Self *Var[1] 1A000800 00000000 00000000 *Var[0] 00000020 ) %recoil damage
        Wait 00000023 %delay before return - this allows the damage animation time to finish 
        %/
        %TO TEST: 
        %charges - NO EFFECT
        %with Chill Out - NO EFFECT
        %with Water Block, - NO EFFECT but needs RunToGoal
        %with defensive badges, - APPLIED - still need to test PUDD 
        %in danger/peril - APPLIED
        %dying with Life Shroom (especially) - tested at least once 
        	%works but need a RunToGoal after - TEST FIX
        %attack buffs/debuffs on Mario
        	%power plus / AoN - NO EFFECT
        	%enemy attack buffs - APPLIED
        	%turbo charge - NO EFFECT but we really should put in that RunToGoal - TEST FIX
        	%shrink - APPLIED
        %double pain - FIX?? nah, Double Pain should double all incoming damage
        Set   *Var[0]   *Var[6] 
  2A8:  Switch   *Var[0]
  2B4:  	CaseOR  ==  00000001 
  2C0:  	CaseOR  ==  00000003 
  2CC:  		ExecWait $Script_802A18AC 
  2D8:  	EndCaseGroup
  2E0:  	CaseOR  ==  00000000 
  2EC:  	CaseOR  ==  00000002 
  2F8:  		ExecWait $Script_802A1A64 
  304:  	EndCaseGroup
  30C:  EndSwitch
  314:  Return
  31C:  End
}
	
@ $Script_802A10B0
{
    0:  Call     InitTargetIterator 	( )
    C:  Call     SetGoalToTarget 	( .Actor:Player )
   1C:  Call     AddGoalPos 	( .Actor:Player 00000000 00000000 00000000 )
   38:  Call     GetGoalPos  	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   54:  Sub  *Var[0]  00000020 
   64:  Call     SetGoalPos 	( .Actor:Self *Var[0] *Var[1] *Var[2] )
   80:  Call     UseBattleCamPreset 	( 0000001A )
   90:  Call     SetActorSpeed 	( .Actor:Player *Fixed[16.0] )
   A4:  Call     SetAnimation 	( .Actor:Player 00000000 00010005 )
   BC:  Call     PlayerRunToGoal ( 00000000 )
   CC:  Return
   D4:  End
}

% Origin: HEURISTIC
@ $Script_802A118C
{
    0:  Call     SetGoalPos 	( .Actor:Player FFFFFFDF 00000000 00000000 )
   1C:  Call     UseBattleCamPreset 	( 0000001A )
   2C:  Call     SetActorSpeed 	( .Actor:Player *Fixed[16.0] )
   40:  Call     SetAnimation 	( .Actor:Player 00000000 00010005 )
   58:  Call     PlayerRunToGoal ( 00000000 )
   68:  Return
   70:  End
}
   
@ $Script_802A18AC
{
    0:  Call     80276EFC ( )
    C:  Call     UseBattleCamPreset 	( 00000004 )
   1C:  Call     MoveBattleCamOver 	( 00000005 )
   2C:  Call     802693F0 ( )
   38:  Wait     00000012 
   44:  Call     EnablePlayerBlur 	( FFFFFFFF )
   54:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
   6C:  Wait     00000003 
   78:  Call     SetGoalToHome 	( .Actor:Player )
   88:  Call     SetActorSpeed 	( .Actor:Player *Fixed[16.0] )
   9C:  Call     SetAnimation 	( .Actor:Player 00000000 00010005 )
   B4:  Call     PlayerRunToGoal ( 00000000 )
   C4:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
   DC:  Return
   E4:  End
}

% Origin: HEURISTIC
@ $Script_802A1998
{
    0:  Call     80276EFC ( )
    C:  Call     802693F0 ( )
   18:  Wait     00000012 
   24:  Call     EnablePlayerBlur 	( FFFFFFFF )
   34:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
   4C:  Wait     00000003 
   58:  Call     SetGoalToHome 	( .Actor:Player )
   68:  Call     SetActorSpeed 	( .Actor:Player *Fixed[16.0] )
   7C:  Call     SetAnimation 	( .Actor:Player 00000000 00010005 )
   94:  Call     PlayerRunToGoal ( 00000000 )
   A4:  Call     SetAnimation 	( .Actor:Player 00000000 00010002 )
   BC:  Return
   C4:  End
}
  
@ $Script_802A1B40 {
    [60]  Call  PlayerTestEnemy   ( *Var0 00000050 00000000 00000000 00000000 00000010 )
}


@ $Script_802A2000 {
[60]  Call  PlayerTestEnemy   ( *Var0 00000050 00000000 00000000 00000000 00000010 )
}

@ $Script_802A23E8 {
   [60]  Call  PlayerTestEnemy   ( *Var0 00000050 00000000 00000000 00000000 00000010 )
}
