
% ====================================================
% This is one of two battle sections that makes numerous
% references to the MapConfigTable (default = 800934F0).
% Since custom maps will cause this to be moved, these battles
% may not load unless all the pointers are updated!
% ====================================================

@ $Function_80218DD0 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_80218E90 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_80218F50 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_80219010 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_802190D0 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_80219190 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_80219250 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_80219630 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_802196F0 {
    [18]  LIA   S3, $Global_MapConfigTable
}

@ $Function_802197B0 {
    [18]  LIA   S3, $Global_MapConfigTable
}






%Monty Moles now have two different kinds of attacks.
%They can throw either small rocks or big rocks.
%The big rocks take longer to come out and do way
%more damage.

@	$MontyMole
{
	[Level]        30`b
	[MaxHP]        20`b
	[Coins]         3`b
	[Item]         80`b
	[AirLift]      25`b
	[Hurricane]    15`b % Bow's "Spook" as well
}


@	$DefenseTable_80230650
{
	.Element:Normal 00000000
	.Element:Hammer FFFFFFFE
	.Element:Throw  FFFFFFFC
	.Element:End
}


@	$StatusTable_8023066C
{
	.Status:Normal      0`
	.Status:Default     0`
	.Status:Sleep      30`
	.Status:Poison     80`
	.Status:Frozen      0`
	.Status:Dizzy      40`
	.Status:Fear        0`
	.Status:Static     10`
	.Status:Paralyze   40`
	.Status:Shrink     25`
	.Status:Stop       40`
	.Status:DefaultTurnMod    0`
	.Status:SleepTurnMod     -1`
	.Status:PoisonTurnMod     0`
	.Status:FrozenTurnMod     0`
	.Status:DizzyTurnMod     -1`
	.Status:FearTurnMod       0`
	.Status:StaticTurnMod     0`
	.Status:ParalyzeTurnMod   0`
	.Status:ShrinkTurnMod     0`
	.Status:StopTurnMod      -1`
	.Status:End
}


@	$Script_TakeTurn_802311BC
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  EnableIdleScript  ( .Actor:Self 00000000 )
   28:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   3C:  Call  SetGoalToTarget   ( .Actor:Self )
   4C:  Call  GetBattlePhase    ( *Var0 )
   5C:  If  *Var0  ==  00000001
   6C:  	Call  UseBattleCamPreset    ( 00000002 )
   7C:  	Call  MoveBattleCamOver     (  1` )
   8C:  EndIf
   0:  Call  RandInt   ( 00000001 *Var0 )
   14:  If  *Var0  ==  00000000
   94:  ChildThread
   9C:  	Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleDig )
   B0:  	Wait  20`
   BC:  	Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleSurface )
   D0:  EndChildThread
  148:  Wait  1`
   D8:  Call  SetAnimation      ( .Actor:Self 00000001 002F0104 )
   F0:  Wait  34`
   FC:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  118:  Add   *Var1  00000014
  128:  Call  SetPartPos        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
   154:  Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  170:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
   24:       If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  194:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[0.4] *Fixed[0.4] *Fixed[0.4] )
  1B4:  Else
  1BC:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[1.0] *Fixed[1.0] *Fixed[1.0] )
  1DC:  EndIf
  1E4:  Call  PlaySoundAtPart   ( .Actor:Self 00000003 .Sound:MoleThrow )
  1FC:  Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Fly 00000000 00000000 )
  21C:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000003 00000020 )
  240:  Switch  *Var0
  24C:  	CaseOR  ==  .HitResult:Miss % 6
  258:  	CaseOR  ==  .HitResult:Lucky % 5
  264:  		Set   *VarA  *Var0
  274:  		Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  288:  		Call  SetGoalToTarget   ( .Actor:Self )
  298:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  2B4:  		Sub   *Var0  00000064
  2C4:  		Set   *Var1  FFFFFFFB
  2D4:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[30.0] )
  2EC:  		Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.1] )
  304:  		Call  SetAnimation      ( .Actor:Self 00000003 002F010F )
  31C:  		Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2  0`  30` .Easing:Linear )
  348:  		Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  364:  		If  *VarA  ==  .HitResult:Lucky % 5
  374:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call  YieldTurn ( )
  3AC:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  3C0:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  3D4:  		Return
  3DC:  	EndCaseGroup
  3E4:  EndSwitch
  3EC:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  400:  Call  SetGoalToTarget   ( .Actor:Self )
  410:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  42C:  Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[20.0] )
  444:  Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.1] )
  45C:  Call  SetAnimation      ( .Actor:Self 00000003 002F010F )
  474:  Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2  0`  20` .Easing:Linear )
  4A0:  Wait  2`
  4AC:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000005 00000020 )
   30:  Else
   94:  Wait  1`
   9C:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:MoleDig )
   93:	Call  SetAnimation      ( .Actor:Self 00000001 002F0117 )
   31:  Wait  50`
   D8:  Call  SetAnimation      ( .Actor:Self 00000001 002F0116 )
   84:  Call  PlaySoundAtActor  ( .Actor:Self 0000202E )
   F0:  Wait  2`
   FC:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  118:  Add   *Var1  00000014
  128:  Call  SetPartPos        ( .Actor:Self 00000003 *Var0 *Var1 *Var2 )
  154: Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .False )
  170:  Call  GetStatusFlags    ( .Actor:Self *Var0 )
   38:       If  *Var0  &  ~Flags:StatusFlags:Shrink % 80000
  194:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[0.8] *Fixed[0.8] *Fixed[0.8] )
  1B4:  Else
  1BC:  	Call  SetPartScale  ( .Actor:Self 00000003 *Fixed[2.0] *Fixed[2.0] *Fixed[2.0] )
  1DC:  EndIf
  1E4:  Call  PlaySoundAtPart   ( .Actor:Self 00000003 .Sound:MoleThrow )
  1FC:  Call  SetPartSounds     ( .Actor:Self 00000003 .ActorSound:Fly 00000000 00000000 )
  21C:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000003 00000020 )
  240:  Switch  *Var0
  24C:  	CaseOR  ==  .HitResult:Miss % 6
  258:  	CaseOR  ==  .HitResult:Lucky % 5
  264:  		Set   *VarA  *Var0
  274:  		Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  288:  		Call  SetGoalToTarget   ( .Actor:Self )
  298:  		Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  2B4:  		Sub   *Var0  00000064
  2C4:  		Set   *Var1  FFFFFFFB
  2D4:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[10.0] )
  2EC:  		Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.1] )
  304:  		Call  SetAnimation      ( .Actor:Self 00000003 002F010F )
  31C:  		Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2  0`  30` .Easing:Linear )
  348:  		Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  364:  		If  *VarA  ==  .HitResult:Lucky % 5
  374:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  398:  		EndIf
  3A0:  		Call  YieldTurn ( )
  3AC:  		Call  EnableIdleScript  ( .Actor:Self 00000001 )
  3C0:  		Call  UseIdleAnimation  ( .Actor:Self .True )
  3D4:  		Return
  3DC:  	EndCaseGroup
  3E4:  EndSwitch
  3EC:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
  400:  Call  SetGoalToTarget   ( .Actor:Self )
  410:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
  42C:  Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[11.0] )
  444:  Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.1] )
  45C:  Call  SetAnimation      ( .Actor:Self 00000003 002F010F )
  474:  Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2  0`  20` .Easing:Linear )
  4A0:  Wait  2`
  4AC:  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000007 00000020 )
   44:  EndIf
  4D4:  Switch  *Var0
  4E0:  	CaseOR  ==  .HitResult:Hit % 0
  4EC:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  4F8:  		Call  GetActorPos       ( .Actor:Player *Var0 *Var1 *Var2 )
  514:  		Sub   *Var0  00000037
  524:  		Set   *Var1  00000000
  534:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[6.0] )
  54C:  		Call  SetPartJumpGravity    ( .Actor:Self 00000003 *Fixed[0.1] )
  564:  		Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2  0`  25` .Easing:Linear )
  590:  		Call  SetPartMoveSpeed  ( .Actor:Self 00000003 *Fixed[4.0] )
  5A8:  		Sub   *Var0  00000014
  5B8:  		Call  FlyPartTo ( .Actor:Self 00000003 *Var0 *Var1 *Var2  0`  21` .Easing:Linear )
  5E4:  		Call  SetPartFlagBits   ( .Actor:Self 00000003 00000001 .True )
  600:  	EndCaseGroup
  608:  EndSwitch
  610:  Call  EnableIdleScript  ( .Actor:Self 00000001 )
  624:  Call  UseIdleAnimation  ( .Actor:Self .True )
  638:  Return
  640:  End
}



@	$Spike
{
	[Level]        90`b
	[MaxHP]        90`b
	[PowerBounce]  40`b
}

%Jonathan will buff either his defense or attack
%when he takes a few hits.

@	$Script_TakeTurn_802329E4
{
    ExecWait  $Script_80231FBC 
		Call  GetActorVar   ( .Actor:Self 00000003 *Var0 )
		If  *Var0  ==  00000000 
		Call  GetActorHP    ( .Actor:Self *Var0 )
			If  *Var0  <=  00000048 
			ExecWait  $Script_Buff
			Wait	2`
		EndIf
	EndIf
    Return
    End
}

@	$Script_802319EC
{
   [28]  Call  SetActorSpeed ( .Actor:Self *Fixed[16.0] )
}

@	$Script_80231FBC
{
  [260]  Loop  00000002
  [51C]  Wait  4`
  [540]  Wait  4`
  [564]  Wait  4`
  [588]  Wait  2`
  [63C]  		Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.1] )
  [78C]  		Wait  4`
  [874]  Call  SetPartJumpGravity    ( .Actor:Self 00000002 *Fixed[0.1] )
  [954]  Wait  1`
  [960]  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact 00000000 00000000 00000007 00000020 )
  [9BC]  		Wait  3`
}


#new:Script $Script_Buff
{
    Call	UseIdleAnimation	( .Actor:Self .False )
	Call	EnableIdleScript	( .Actor:Self 00000000 )
	Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
	If  *Var0  !=  00000010
    		Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
    		ConstOR  *Var0 00000010
    	    Call  SetActorVar   ( .Actor:Self 00000000 *Var0 )
    		Call  UseBattleCamPreset    ( 0000000D )
    		Call  BattleCamTargetActor  ( .Actor:Self )
    		Call  MoveBattleCamOver     (  20` )
     		Wait  20`
     		Call  ActorSpeak    ( 001100DF .Actor:Self 00000001 0010000A 00100001 )
			Call  SetAnimation      ( .Actor:Self 00000001 00100001 )
			Wait  5`
    EndIf
	Set		*Var[8]  *Var[0] 
	Call	SetTargetActor	( .Actor:Self .Actor:Player )
	Call	UseBattleCamPreset	( 0000000E )
	Call	BattleCamTargetActor	( .Actor:Self )
	Call	MoveBattleCamOver		( 0000000F )
	Wait	8`
	Call    PlaySoundAtActor  ( .Actor:Self .Sound:MoleSurface )
	Call	SetAnimation  ( .Actor:Self 00000001 00100005 )
	Wait	10` 
	Call	SetAnimation  ( .Actor:Self 00000001 00100004 )
	Call	GetActorPos		( .Actor:Self *Var[0] *Var[1] *Var[2] )
	Call	GetStatusFlags	( .Actor:Self *Var[A] )
	If  *Var[A]  &  00080000 
		Add		*Var[1] 0000000C 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.12011719] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	Else
		Add		*Var[1] 0000001F 
		Sub		*Var[2] 00000002 
		Call	PlayEffect	( 00000033 00000005 *Var[0] *Var[1] *Var[2] *Fixed[0.30078125] 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
	EndIf
	Wait	12` 
	Thread
		Call	8026BF48	( 00000001 )
		Call  RandInt   ( 00000001 *Var0 )
		If  *Var0  ==  00000000
			Call	BoostAttack 	( .Actor:Self 00000001 )
		Else
			Call	BoostDefense 	( .Actor:Self 00000001 )  
		EndIf
		Call	8026BF48	( 00000000 )
	EndThread
	Call    WaitForBuffDone ( )
    Call    UseBattleCamPreset    ( 00000002 )
	Call	PlaySoundAtActor 	( *Var[8] 0000201D )
	Call	SetAnimation  ( .Actor:Self 00000001 00100006 )
	Wait	12`
    Return
    End
}




@	$HuffNPuff
{
	[Level]       100`b
	[MaxHP]       150`b
	[PowerBounce]  40`b
}


@	$Script_Init_8022F780
{
    0:  Call  BindTakeTurn  ( .Actor:Self $Script_TakeTurn_802305E8 )
   14:  Call  BindIdle      ( .Actor:Self $Script_Idle_8022FA10 )
   28:  Call  BindHandleEvent   ( .Actor:Self $Script_HandleEvent_8022FE2C )
   3C:  Call  BindNextTurn  ( .Actor:Self $Script_NextTurn_8022FA00 )
   50:  Call  GetActorVar   ( .Actor:Self 00000000 *Var0 )
   68:  If  *Var0  ==  00000000
   78:  	Call  8027D4C8      ( FFFFFF81 00000001 FFFFFFFF FFFFFFF7 )
   94:  	Call  8027D4C8      ( FFFFFF81 00000002 FFFFFFFF FFFFFFF7 )
   B0:  	Call  SetTargetOffset   ( .Actor:Self 00000001  -1`  9` )
   CC:  	Call  SetTargetOffset   ( .Actor:Self 00000002  -1`  -41` )
   E8:  	Call  SetActorSize  ( .Actor:Self  36`  47` )
  100:  	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022F580 )
  118:  	Call  SetAnimation  ( .Actor:Self 00000001 004C0002 )
  130:  	Call  SetActorVar   ( .Actor:Self 00000000 00000000 )
  148:  Else
  150:  	Call  8027D4C8      ( FFFFFF81 00000001 FFFFFFF8 FFFFFFF3 )
  16C:  	Call  8027D4C8      ( FFFFFF81 00000002 FFFFFFF8 FFFFFFF3 )
  188:  	Call  SetTargetOffset   ( .Actor:Self 00000001  1`  14` )
  1A4:  	Call  SetTargetOffset   ( .Actor:Self 00000002  1`  -36` )
  1C0:  	Call  SetActorSize  ( .Actor:Self  42`  53` )
  1D8:  	Call  SetIdleAnimations ( .Actor:Self 00000001 $IdleAnimations_8022F5DC )
  1F0:  	Call  SetAnimation  ( .Actor:Self 00000001 004C0003 )
  208:  	Call  SetActorVar   ( .Actor:Self 00000000 00000001 )
  220:  EndIf
  228:  Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
  240:  Call  SetActorVar   ( .Actor:Self 00000003 00000064 )
  258:  Call  SetActorVar   ( .Actor:Self 00000004 00000064 )
  270:  Return
  278:  End
}


@	$Script_Idle_8022FA10
{
    0:  Set   *VarF  00000000
   10:  Loop
   1C:  	Call  GetActorVar   ( .Actor:Self 00000002 *VarA )
   34:  	Switch  *VarA
   40:  		Case  ==  00000000
   4C:  			Call  $Function_80218C40    ( *VarF *Var0 *Fixed[0.97] *Fixed[1.03] 0000000F 00000000 00000000 )
   74:  			Call  $Function_80218C40    ( *VarF *Var1 *Fixed[1.03] *Fixed[0.97] 0000000F 00000000 00000000 )
   9C:  			Add   *VarF  00000001
   AC:  		Case  ==  00000001
   B8:  			Call  $Function_80218C40    ( *VarF *Var0 *Fixed[0.95] *Fixed[1.05] 0000000F 00000000 00000000 )
   E0:  			Call  $Function_80218C40    ( *VarF *Var1 *Fixed[1.05] *Fixed[0.95] 0000000F 00000000 00000000 )
  108:  			Add   *VarF  00000003
  118:  		Case  ==  00000002
  124:  			Call  $Function_80218C40    ( *VarF *Var0 *Fixed[0.9] *Fixed[1.1] 0000000F 00000000 00000000 )
  14C:  			Call  $Function_80218C40    ( *VarF *Var1 *Fixed[1.1] *Fixed[0.9] 0000000F 00000000 00000000 )
  174:  			Add   *VarF  00000005
  184:  	EndSwitch
  18C:  	Call  GetActorVar   ( .Actor:Self 00000003 *Var2 )
  1A4:  	Call  GetActorVar   ( .Actor:Self 00000004 *Var3 )
  1BC:  	DivF  *Var2  *Fixed[100.0]
  1CC:  	DivF  *Var3  *Fixed[100.0]
  1DC:  	MulF  *Var1  *Var2
  1EC:  	MulF  *Var0  *Var3
  1FC:  	Call  SetActorScale ( .Actor:Self *Var1 *Var0 *Fixed[1.2] )
  218:  	If  *VarF  >=  0000001E
  228:  		Set   *VarF  00000000
  238:  	EndIf
  240:  	Wait  1`
  24C:  EndLoop
  254:  Return
  25C:  End
}


@	$Script_TakeTurn_8021D2B8
{
    0:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
   18:  Switch  *Var0
   24:  	CaseOR  ==  00000004
   30:  	CaseOR  ==  00000008
   3C:  	CaseOR  ==  0000000B
   48:  	EndCaseGroup
   50:  	Default
   58:  		Call  GetActorHP    ( .Actor:Self *Var0 )
   6C:  		If  *Var0  <=  0000000F
   7C:  			Call  SetActorVar   ( .Actor:Self 00000001 0000000C )
   94:  		EndIf
   9C:  EndSwitch
   A4:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
   BC:  Switch  *Var0
   C8:  	Case  ==  00000003
   D4:  		Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
   EC:  		If  *Var0  !&  00000020
   FC:  			Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  114:  			ConstOR  *Var0 00000020
  124:  			Call  SetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  13C:  			ExecWait  $Script_ChargeThunderDialog
  148:  		EndIf
  150:  EndSwitch
  158:  Call  GetActorVar   ( .Actor:Self 00000002 *Var0 )
  170:  If  *Var0  !=  00000000
  180:  	Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  198:  	If  *Var0  !&  00000010
  1A8:  		Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  1C0:  		ConstOR  *Var0 00000010
  1D0:  		Call  SetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  1E8:  		ExecWait  $Script_PermissionToAttackDialog
  1F4:  	EndIf
  1FC:  	ExecWait  $Script_TuffPuffSwarm
  208:  EndIf
  210:  Call  GetPlayerHP   ( *Var0 )
  220:  If  *Var0  ==  00000000
  230:  	Return
  238:  EndIf
  240:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
  258:  Switch  *Var0
  264:  	Case  ==  0000000C
  270:  		Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  288:  		If  *Var0  !&  00000080
  298:  			Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  2B0:  			ConstOR  *Var0 00000080
  2C0:  			Call  SetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  2D8:  			ExecWait  $Script_LowHealthDialog
  2E4:  		EndIf
  2EC:  EndSwitch
  2F4:  Call  GetActorVar   ( .Actor:Self 00000001 *Var0 )
  30C:  Switch  *Var0
  318:  	Case  ==  00000000
				Set *GB_EnemyDefense  00000000 %Used to determine if he should buff defense when eating Tuff Puffs.
				ExecWait $Script_BodySlam
  324:  		ExecWait  $Script_HealOrSlam
  330:  		Call  SetActorVar   ( .Actor:Self 00000001 00000001 )
  348:  	Case  ==  00000001
  354:  		ExecWait  $Script_HurricaneBreath
				ExecWait $Script_BodySlam
  360:  		Call  SetActorVar   ( .Actor:Self 00000001 00000002 )
  378:  	Case  ==  00000002
				ExecWait $Script_BodySlam
  384:  		ExecWait  $Script_HealOrSlam
  390:  		Call  SetActorVar   ( .Actor:Self 00000001 00000003 )
  3A8:  	Case  ==  00000003
				ExecWait  $Script_HurricaneBreath
  3B4:  		ExecWait  $Script_ChargeThunder
  3C0:  		Call  SetActorVar   ( .Actor:Self 00000001 00000004 )
  3D8:  	Case  ==  00000004
  3E4:  		ExecWait  $Script_Thunderstorm
  3F0:  		Call  SetActorVar   ( .Actor:Self 00000001 00000005 )
  408:  	Case  ==  00000005
				ExecWait $Script_BodySlam
  414:  		ExecWait  $Script_HealOrSlam
  420:  		Call  SetActorVar   ( .Actor:Self 00000001 00000006 )
  438:  	Case  ==  00000006
  444:  		ExecWait  $Script_HurricaneBreath
				ExecWait $Script_BodySlam
  450:  		Call  SetActorVar   ( .Actor:Self 00000001 00000007 )
  468:  	Case  ==  00000007
				ExecWait  $Script_BodySlam
  474:  		ExecWait  $Script_ChargeLargeThunder
  480:  		Call  SetActorVar   ( .Actor:Self 00000001 00000008 )
  498:  	Case  ==  00000008
  4A4:  		ExecWait  $Script_LargeThunderstorm
  4B0:  		Call  SetActorVar   ( .Actor:Self 00000001 00000009 )
  4C8:  	Case  ==  00000009
				ExecWait $Script_BodySlam
  4D4:  		ExecWait  $Script_HealOrSlam
  4E0:  		Call  SetActorVar   ( .Actor:Self 00000001 0000000A )
  4F8:  	Case  ==  0000000A
				ExecWait  $Script_HurricaneBreath
  504:  		ExecWait  $Script_ChargeThunder
  510:  		Call  SetActorVar   ( .Actor:Self 00000001 0000000B )
  528:  	Case  ==  0000000B
  534:  		ExecWait  $Script_Thunderstorm
  540:  		Call  SetActorVar   ( .Actor:Self 00000001 00000000 )
  558:  	Case  ==  0000000C
  564:  		ExecWait  $Script_GroupBodySlam
  570:  EndSwitch
  578:  Return
  580:  End
}



@	$Script_GroupBodySlam
{
   [A8]  Wait  20`
 [4740]  		Wait  90`
 [5038]  Set   *VarA  0000000F
}

%Huff N. Puff will increase his defense by 1 twice every 12 turns.

@	$Script_HealOrSlam
{
    0:  UseArray  $TuffPuffIDs
    C:  Call  GetActorVar   ( .Actor:Self 00000002 *Var9 )
   24:  If  *Var9  ==  00000000
   34:  	ExecWait  $Script_BodySlam
   40:  	Return
   48:  EndIf
   50:  Set   *VarA  00000000
   60:  If  *Var9  &  00000001
   70:  	Call  GetActorVar   ( *Array[0] 00000005 *VarB )
   88:  	Add   *VarA  *VarB
   98:  EndIf
   A0:  If  *Var9  &  00000002
   B0:  	Call  GetActorVar   ( *Array[1] 00000005 *VarB )
   C8:  	Add   *VarA  *VarB
   D8:  EndIf
   E0:  If  *Var9  &  00000004
   F0:  	Call  GetActorVar   ( *Array[2] 00000005 *VarB )
  108:  	Add   *VarA  *VarB
  118:  EndIf
  120:  If  *Var9  &  00000008
  130:  	Call  GetActorVar   ( *Array[3] 00000005 *VarB )
  148:  	Add   *VarA  *VarB
  158:  EndIf
  160:  If  *Var9  &  00000010
  170:  	Call  GetActorVar   ( *Array[4] 00000005 *VarB )
  188:  	Add   *VarA  *VarB
  198:  EndIf
  1A0:  If  *Var9  &  00000020
  1B0:  	Call  GetActorVar   ( *Array[5] 00000005 *VarB )
  1C8:  	Add   *VarA  *VarB
  1D8:  EndIf
  1E0:  If  *Var9  &  00000040
  1F0:  	Call  GetActorVar   ( *Array[6] 00000005 *VarB )
  208:  	Add   *VarA  *VarB
  218:  EndIf
  220:  If  *Var9  &  00000080
  230:  	Call  GetActorVar   ( *Array[7] 00000005 *VarB )
  248:  	Add   *VarA  *VarB
  258:  EndIf
  260:  If  *Var9  &  00000100
  270:  	Call  GetActorVar   ( *Array[8] 00000005 *VarB )
  288:  	Add   *VarA  *VarB
  298:  EndIf
  2A0:  If  *Var9  &  00000200
  2B0:  	Call  GetActorVar   ( *Array[9] 00000005 *VarB )
  2C8:  	Add   *VarA  *VarB
  2D8:  EndIf
  2E0:  Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  2F8:  If  *Var0  &  00000001
  308:  	If  *VarA  <=  00000002
  318:  		Call  RandInt   ( 00000064 *VarB )
  32C:  		If  *VarB  <  00000032
  33C:  			ExecWait  $Script_BodySlam
  348:  			Return
  350:  		EndIf
  358:  	EndIf
  360:  EndIf
  368:  Call  UseIdleAnimation  ( .Actor:Self .False )
  37C:  Call  PlaySoundAtActor  ( .Actor:Self 000003B0 )
  390:  Call  SetAnimation      ( .Actor:Self 00000001 007C001A )
  3A8:  Call  SetAnimation      ( .Actor:Self 00000002 007C001B )
  3C0:  Call  SetAnimation      ( .Actor:Self 00000003 007C001C )
  3D8:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  3F4:  Add   *Var0  FFFFFFF3
  404:  Add   *Var1  00000000
  414:  Add   *Var2  00000000
  424:  Call  $Function_80218774    ( 00000000 *Var0 *Var1 *Var2 *Fixed[180.0] *Fixed[-1.0] *Fixed[1.2] 00000000 *Var8 )
  454:  Call  $Function_80218000    ( 00000050 000000DC )
  468:  Thread
  470:  	Call  ShakeCam  ( .Cam:Battle 00000000  110` *Fixed[0.3] )
  48C:  EndThread
  494:  Wait  10`
  4A0:  Call  PlaySoundAtActor  ( .Actor:Self .Sound:BigPowerUp )
  4B4:  Set   *Var1  00000000
  4C4:  If  *Var9  &  00000010
  4D4:  	Set   *Var0  *Array[4]
  4E4:  	Exec  $Script_8021E364 *Var7
  4F4:  	Add   *Var1  00000001
  504:  	Wait  2`
  510:  EndIf
  518:  If  *Var9  &  00000200
  528:  	Set   *Var0  *Array[9]
  538:  	Exec  $Script_8021E364 *Var7
  548:  	Add   *Var1  00000001
  558:  	Wait  2`
  564:  EndIf
  56C:  If  *Var9  &  00000008
  57C:  	Set   *Var0  *Array[3]
  58C:  	Exec  $Script_8021E364 *Var7
  59C:  	Add   *Var1  00000001
  5AC:  	Wait  2`
  5B8:  EndIf
  5C0:  If  *Var9  &  00000020
  5D0:  	Set   *Var0  *Array[5]
  5E0:  	Exec  $Script_8021E364 *Var7
  5F0:  	Add   *Var1  00000001
  600:  	Wait  2`
  60C:  EndIf
  614:  If  *Var9  &  00000002
  624:  	Set   *Var0  *Array[1]
  634:  	Exec  $Script_8021E364 *Var7
  644:  	Add   *Var1  00000001
  654:  	Wait  2`
  660:  EndIf
  668:  If  *Var9  &  00000001
  678:  	Set   *Var0  *Array[0]
  688:  	Exec  $Script_8021E364 *Var7
  698:  	Add   *Var1  00000001
  6A8:  	Wait  2`
  6B4:  EndIf
  6BC:  If  *Var9  &  00000100
  6CC:  	Set   *Var0  *Array[8]
  6DC:  	Exec  $Script_8021E364 *Var7
  6EC:  	Add   *Var1  00000001
  6FC:  	Wait  2`
  708:  EndIf
  710:  If  *Var9  &  00000004
  720:  	Set   *Var0  *Array[2]
  730:  	Exec  $Script_8021E364 *Var7
  740:  	Add   *Var1  00000001
  750:  	Wait  2`
  75C:  EndIf
  764:  If  *Var9  &  00000080
  774:  	Set   *Var0  *Array[7]
  784:  	Exec  $Script_8021E364 *Var7
  794:  	Add   *Var1  00000001
  7A4:  	Wait  2`
  7B0:  EndIf
  7B8:  If  *Var9  &  00000040
  7C8:  	Set   *Var0  *Array[6]
  7D8:  	Exec  $Script_8021E364 *Var7
  7E8:  	Add   *Var1  00000001
  7F8:  	Wait  2`
  804:  EndIf
  80C:  Label  0
  818:  DoesScriptExist  *Var7 *Var0
  828:  Wait  1`
  834:  If  *Var0  ==  00000001
  844:  	Goto  0
  850:  EndIf
  858:  Call  RemoveEffect  ( *Var8 )
  868:  Call  StopSound     ( 000003B0 )
  878:  Call  StopSound     ( 000003E6 )
  888:  Call  SetAnimation  ( .Actor:Self 00000001 007C0017 )
  8A0:  Call  SetAnimation  ( .Actor:Self 00000002 007C0018 )
  8B8:  Call  SetAnimation  ( .Actor:Self 00000003 007C0019 )
  8D0:  Thread
  8D8:  	Wait  2`
  8E4:  	Call  PlaySoundAtActor  ( .Actor:Self 0000206D )
  8F8:  	Call  PlaySoundAtActor  ( .Actor:Self 00000214 )
  90C:  EndThread
  914:  Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  930:  Call  GetActorVar   ( .Actor:Self 00000006 *Var3 )
  948:  Call  PlayEffect    ( ~FX:Sparkles:Star *Var0 *Var1 *Var2 *Var3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  98C:  Add   *Var0  00000014
  99C:  Call  PlayEffect    ( ~FX:Recover:HP *Var0 *Var1 *Var2 *VarA 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  9E0:  Call  GetActorHP    ( .Actor:Self *VarB )
  9F4:  Add   *VarB  *VarA
  A04:  Call  SetEnemyHP    ( .Actor:Self *VarB )
  A18:  Call  SetActorVar   ( .Actor:Self 00000002 00000000 )
  A30:  Call  GetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  A48:  ConstOR  *Var0 00000001
  A58:  Call  SetActorVar   ( .Actor:Enemy0 00000000 *Var0 )
  A70:  Wait  5`
  36C:  Call  UseBattleCamPreset    ( 00000013 )
  37C:  Call  GetActorPos       ( .Actor:Self *Var0 *Var1 *Var2 )
  398:  Sub   *Var0  00000014
  3A8:  Call  SetBattleCamTarget    ( *Var0 *Var1 *Var2 )
  3C0:  Call  SetBattleCamZoom  (  300` )
  3D0:  Call  SetBattleCamOffsetZ   (  20` )
  3E0:  Call  MoveBattleCamOver (  180` )
  3F0:  Wait  20`
	If  *GB_EnemyDefense  < 00000002
		Add *GB_EnemyDefense  00000001
		Wait  1`
			    Set        *Var[8]  *Var[0] 
		Call    SetTargetActor    ( .Actor:Self .Actor:Player )
		Call    UseBattleCamPreset    ( 0000000E )
		Call    BattleCamTargetActor    ( .Actor:Self )
		Call    MoveBattleCamOver        ( 0000000F )
		Wait    0000000F 
		Call    GetActorPos        ( .Actor:Self *Var[0] *Var[1] *Var[2] )
		Call    GetStatusFlags    ( .Actor:Self *Var[A] )
		Thread
			Call    8026BF48    ( 00000001 )
			Call    BoostDefense     ( .Actor:Self 00000001 )
			Call    8026BF48    ( 00000000 )
		EndThread
			Wait 5`
    EndIf
  A7C:  Call  UseBattleCamPreset    ( 00000002 )
  A8C:  Call  UseIdleAnimation      ( .Actor:Self .True )
  AA0:  Return
  AA8:  End
}


%Attack twice woo.

@	$Script_BodySlam
{
    0:  Call  UseIdleAnimation  ( .Actor:Self .False )
   14:  Call  SetTargetActor    ( .Actor:Self .Actor:Player )
   28:  Call  UseBattleCamPreset    ( 0000003F )
   38:  Call  AddBattleCamZoom  (  -200` )
   48:  Call  SetBattleCamOffsetZ   (  -30` )
   58:  Call  BattleCamTargetActor  ( .Actor:Self )
   68:  Call  SetGoalToTarget   ( .Actor:Self )
   78:  Call  GetActorVar       ( .Actor:Self 00000006 *Var0 )
   90:  Call  GetActorVar       ( .Actor:Self 00000007 *Var1 )
   A8:  SetF  *Var2  *Fixed[62.5]
   B8:  SetF  *Var3  *Fixed[47.5]
   C8:  MulF  *Var2  *Var0
   D8:  MulF  *Var3  *Var1
   E8:  DivF  *Var2  *Fixed[100.0]
   F8:  DivF  *Var3  *Fixed[100.0]
  108:  Call  AddGoalPos        ( .Actor:Self *Var2 *Var3  0` )
  124:  Call  AddGoalPos        ( .Actor:Self  0`  20`  0` )
  140:  Call  FlyToGoal ( .Actor:Self  40`  -20` .Easing:SinOut )
  15C:  Wait  1`
  168:  Call  PlaySoundAtActor  ( .Actor:Self 000003E7 )
  17C:  Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000001 00000010 )
  1A0:  Switch  *Var0
  1AC:  	CaseOR  ==  .HitResult:Miss % 6
  1B8:  	CaseOR  ==  .HitResult:Lucky % 5
  1C4:  		Call  UseBattleCamPreset    ( 00000001 )
  1D4:  		Call  SetAnimation  ( .Actor:Self 00000001 007C000B )
  1EC:  		Call  SetAnimation  ( .Actor:Self 00000002 007C000C )
  204:  		Call  SetAnimation  ( .Actor:Self 00000003 007C000D )
  21C:  		Call  SetGoalToTarget       ( .Actor:Self )
  22C:  		Call  GetGoalPos    ( .Actor:Self *Var5 *Var6 *Var7 )
  248:  		Call  SetGoalPos    ( .Actor:Self *Var5 *Var3 *Var7 )
  264:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.0] )
  278:  		Call  JumpToGoal    ( .Actor:Self  20` .False .False .False )
  298:  		Thread
  2A0:  			Call  ShakeCam  ( .Cam:Battle 00000000  10` *Fixed[0.8] )
  2BC:  		EndThread
  2C4:  		If  *Var0  ==  .HitResult:Lucky % 5
  2D4:  			Call  EnemyTestTarget   ( .Actor:Self *Var0 ~Flags:DamageType:TriggerLucky 00000000 00000000 00000000 )
  2F8:  		EndIf
  300:  		Call  SetAnimation  ( .Actor:Self 00000001 007C0004 )
  318:  		Call  SetAnimation  ( .Actor:Self 00000002 007C0005 )
  330:  		Call  SetAnimation  ( .Actor:Self 00000003 007C0006 )
  348:  		Call  SetActorJumpGravity   ( .Actor:Self *Fixed[0.5] )
  35C:  		Call  AddGoalPos    ( .Actor:Self  -80`  0`  0` )
  378:  		Call  JumpToGoal    ( .Actor:Self  25` .False .False .False )
  398:  		Thread
  3A0:  			Call  ShakeCam  ( .Cam:Battle 00000000  8` *Fixed[0.6] )
  3BC:  		EndThread
  3C4:  		Call  AddGoalPos    ( .Actor:Self  -50`  0`  0` )
  3E0:  		Call  JumpToGoal    ( .Actor:Self  20` .False .False .False )
  400:  		Thread
  408:  			Call  ShakeCam  ( .Cam:Battle 00000000  6` *Fixed[0.4] )
  424:  		EndThread
  42C:  		Call  AddGoalPos    ( .Actor:Self  -30`  0`  0` )
  448:  		Call  JumpToGoal    ( .Actor:Self  15` .False .False .False )
  468:  		Thread
  470:  			Call  ShakeCam  ( .Cam:Battle 00000000  4` *Fixed[0.2] )
  48C:  		EndThread
  494:  		Call  AddGoalPos    ( .Actor:Self  -20`  0`  0` )
  4B0:  		Call  JumpToGoal    ( .Actor:Self  10` .False .False .False )
  4D0:  		Wait  9`
  4DC:  		Call  SetAnimation  ( .Actor:Self 00000001 007C0001 )
  4F4:  		Call  SetAnimation  ( .Actor:Self 00000002 007C0002 )
  50C:  		Call  SetAnimation  ( .Actor:Self 00000003 007C0003 )
  524:  		Call  UseBattleCamPreset    ( 00000002 )
  534:  		Call  SetGoalToHome ( .Actor:Self )
  544:  		Call  FlyToGoal     ( .Actor:Self  80`  -20` .Easing:SinOut )
  560:  		Call  UseIdleAnimation      ( .Actor:Self .True )
  574:  		Return
  57C:  	EndCaseGroup
  584:  EndSwitch
  58C:  Call  SetAnimation  ( .Actor:Self 00000001 007C000B )
  5A4:  Call  SetAnimation  ( .Actor:Self 00000002 007C000C )
  5BC:  Call  SetAnimation  ( .Actor:Self 00000003 007C000D )
  5D4:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.0] )
  5E8:  Call  SetGoalToTarget       ( .Actor:Self )
  5F8:  Call  AddGoalPos    ( .Actor:Self  0` *Var3  5` )
  614:  Call  AddGoalPos    ( .Actor:Self  0`  -30`  0` )
  630:  Call  JumpToGoal    ( .Actor:Self  20` .False .False .False )
  650:  Call  80269EAC      ( 00000018 )
  660:  Wait  1`
  66C:  Call  SetGoalToTarget       ( .Actor:Self )
		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000000 00000000 00000007 00000020 )
  58C:  Call  SetAnimation  ( .Actor:Self 00000001 007C000B )
  5A4:  Call  SetAnimation  ( .Actor:Self 00000002 007C000C )
  5BC:  Call  SetAnimation  ( .Actor:Self 00000003 007C000D )
  5D4:  Call  SetActorJumpGravity   ( .Actor:Self *Fixed[1.75] )
  5E8:  Call  SetGoalToTarget       ( .Actor:Self )
  5F8:  Call  AddGoalPos    ( .Actor:Self  0` *Var3  5` )
  614:  Call  AddGoalPos    ( .Actor:Self  0`  -30`  0` )
  630:  Call  JumpToGoal    ( .Actor:Self  20` .False .False .False )
  650:  Call  80269EAC      ( 00000018 )
  660:  Wait  3`
  66C:  Call  SetGoalToTarget       ( .Actor:Self )
		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:0 00000008 00000000 00000008 00000020 )
  7D8:  Switch  *Var0
  7E4:  	CaseOR  ==  .HitResult:Hit % 0
  7F0:  	CaseOR  ==  .HitResult:QuakeImmune % 2
  7FC:  		Thread
  804:  			Call  ShakeCam  ( .Cam:Battle 00000000  20` *Fixed[1.0] )
  820:  		EndThread
  828:  		Call  UseBattleCamPreset    ( 00000002 )
  838:  		Call  GetBattleFlags        ( *Var0 )
  848:  		If  *Var0  !&  80000000
  858:  			Call  GetStatusFlags    ( .Actor:Player *Var0 )
  86C:  			If  *Var0  !&  ~Flags:StatusFlags:Stone % 100000
  87C:  				Thread
  884:  					Call  GetActorPos   ( .Actor:Player *Var0 *Var1 *Var2 )
  8A0:  					Add   *Var1  0000000A
  8B0:  					Wait  25`
  8BC:  					Call  PlayEffect    ( ~FX:YellowCloudPuff *Var0 *Var1 *Var2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
  900:  				EndThread
  908:  			EndIf
  910:  		EndIf
  918:  		Call  GetActorPos   ( .Actor:Self *Var0 *Var1 *Var2 )
  934:  		Call  SetGoalPos    ( .Actor:Self *Var0 *Var1 *Var2 )
  950:  		Call  AddGoalPos    ( .Actor:Self  30`  0`  0` )
  96C:  		Call  JumpWithBounce    ( .Actor:Self  20` *Fixed[4.0] )
  984:  		Wait  2`
  990:  		Call  SetAnimation  ( .Actor:Self 00000001 007C0001 )
  9A8:  		Call  SetAnimation  ( .Actor:Self 00000002 007C0002 )
  9C0:  		Call  SetAnimation  ( .Actor:Self 00000003 007C0003 )
  9D8:  		Call  SetGoalToHome ( .Actor:Self )
  9E8:  		Call  FlyToGoal     ( .Actor:Self  40`  -20` .Easing:SinOut )
  A04:  	EndCaseGroup
  A0C:  EndSwitch
  A14:  Call  UseIdleAnimation  ( .Actor:Self .True )
  A28:  Return
  A30:  End
}

%Hurricane pierces now.

@	$Script_HurricaneBreath
{
  [344]  	Wait  4`
  [3F0]  Wait  72`
  [454]  Wait  12`
  [7EC]  		Loop  00000008
  [934]  		Wait  7`
  [9D4]  		Wait  4`
  [D90]  		Loop  00000010
 [1230]  		Loop  00000009
 [1380]  	Wait  20`
 [13FC]  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|IgnoreDefense 00000000 00000000 0000000E 00000020 )
 [1430]  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|IgnoreDefense 00000000 00000000 0000000C 00000020 )
 [1464]  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|IgnoreDefense 00000000 00000000 0000000A 00000020 )
 [1498]  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|IgnoreDefense 00000000 00000000 00000008 00000020 )
 [14CC]  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|IgnoreDefense 00000000 00000000 00000006 00000020 )
 [14FC]  		Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:NoContact|IgnoreDefense 00000000 00000000 00000004 00000020 )
 [1598]  		Wait  12`
}

@	$Script_ChargeThunder
{
  [23C]  Wait  40`
  [268]  Wait  20`
}

@	$Script_ChargeLargeThunder
{
  [23C]  Wait  40`
  [268]  Wait  20`
}

@	$Script_Thunderstorm
{
  [15C]  Wait  12`
  [2A4]  	Wait  12`
  [3E0]  Wait  3`
  [518]  Wait  4`
  [658]  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense|NoContact|Quake 00000000 00000000 0000000E 00000020 )
  [710]  		Wait  4`
}


@	$Script_LargeThunderstorm
{
   [9C]  	Call  ShakeCam  ( .Cam:Battle 00000000  40` *Fixed[0.8] )
  [2C4]  Wait  10`
  [3EC]  	Wait  15`
  [5EC]  		Wait  10`
  [A24]  		Wait  10`
  [E04]  Wait  1`
  [E10]  Wait  1`
  [E40]  Call  EnemyDamageTarget ( .Actor:Self *Var0 ~Flags:DamageType:IgnoreDefense|NoContact|Electric 00000000 00000000 00000010 00000020 )
  [E9C]  		Wait  8`
}



%Tuff Puffs have a weird attack, so there's only so much I can do with that.

@	$Script_TuffPuffSwarm
{
   [D8]  		Wait  1`
  [170]  		Wait  1`
  [208]  		Wait  1`
  [2A0]  		Wait  1`
  [338]  		Wait  1`
  [3D0]  		Wait  1`
  [468]  		Wait  1`
  [500]  		Wait  1`
  [598]  		Wait  5`
  [630]  		Wait  5`
 [49C0]  			Call  EnemyDamageTarget ( .Actor:Self *VarA ~Flags:DamageType:IgnoreDefense|NoContact 00000000 00000000 00000004 00000040 )
 [4BB8]  			Call  EnemyDamageTarget ( .Actor:Self *VarA ~Flags:DamageType:Unblockable|IgnoreDefense|NoContact 00000000 00000000 00000004 00000040 )
 [6030]  			Wait  1`
 [620C]  			Wait  1`
 [63E8]  			Wait  1`
 [65C4]  			Wait  1`
 [67A0]  			Wait  1`
 [697C]  			Wait  1`
 [6B58]  			Wait  1`
 [6D34]  			Wait  1`
 [6F10]  			Wait  1`
 [70EC]  			Wait  1`
}



%Haha let's add more moles

@	$Formation_01
{
	$MontyMole 00000001 0000000A 00000000 00000000 00000000 00000000
	$MontyMole 00000002 00000009 00000000 00000000 00000000 00000000
}


@	$Formation_02
{
	$MontyMole 00000000 0000000A 00000000 00000000 00000000 00000000
	$MontyMole 00000001 00000009 00000000 00000000 00000000 00000000
	$MontyMole 00000002 00000008 00000000 00000000 00000000 00000000
}


%I heard you like Monty Moles

@	$Formation_05
{
	$MontyMole 00000001 0000000A 00000000 00000000 00000000 00000000
	$MontyMole 00000003 00000009 00000000 00000000 00000000 00000000
	$Spike 00000006 00000008 00000000 00000000 00000000 00000000
}


@	$FormationTable
{
	$SJIS_80235D9C 00000001 $Formation_00 $Stage_802353B0 00000000
	$SJIS_80235D88 00000002 $Formation_01 $Stage_80232E6C 00000000
	$SJIS_80235D70 00000003 $Formation_02 $Stage_80232E6C 00000000
	$SJIS_80235D58 00000003 $Formation_03 $Stage_80232E6C 00000000
	$SJIS_80235D40 00000004 $Formation_04 $Stage_80232E6C 00000000
	$SJIS_80235D30 00000003 $Formation_05 $Stage_80232E6C 00000000
	00000000 00000000 00000000 00000000 00000000
}